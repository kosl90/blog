{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/images/404.jpg","path":"images/404.jpg","modified":0,"renderable":0},{"_id":"source/images/abstract-1.jpg","path":"images/abstract-1.jpg","modified":0,"renderable":0},{"_id":"source/images/abstract-10.jpg","path":"images/abstract-10.jpg","modified":0,"renderable":0},{"_id":"source/images/abstract-3.jpg","path":"images/abstract-3.jpg","modified":0,"renderable":0},{"_id":"source/images/abstract-4.jpg","path":"images/abstract-4.jpg","modified":0,"renderable":0},{"_id":"source/images/abstract-5.jpg","path":"images/abstract-5.jpg","modified":0,"renderable":0},{"_id":"source/images/abstract-6.jpg","path":"images/abstract-6.jpg","modified":0,"renderable":0},{"_id":"source/images/abstract-7.jpg","path":"images/abstract-7.jpg","modified":0,"renderable":0},{"_id":"source/images/abstract-8.jpg","path":"images/abstract-8.jpg","modified":0,"renderable":0},{"_id":"source/images/apple-touch-icon-114x114-precomposed.png","path":"images/apple-touch-icon-114x114-precomposed.png","modified":0,"renderable":0},{"_id":"source/images/apple-touch-icon-144x144-precomposed.png","path":"images/apple-touch-icon-144x144-precomposed.png","modified":0,"renderable":0},{"_id":"source/images/apple-touch-icon-72x72-precomposed.png","path":"images/apple-touch-icon-72x72-precomposed.png","modified":0,"renderable":0},{"_id":"source/images/apple-touch-icon-precomposed.png","path":"images/apple-touch-icon-precomposed.png","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/disqus-logo.png","path":"images/disqus-logo.png","modified":0,"renderable":0},{"_id":"source/images/ps_neutral.png","path":"images/ps_neutral.png","modified":0,"renderable":0},{"_id":"source/images/retina_dust.png","path":"images/retina_dust.png","modified":0,"renderable":0},{"_id":"source/images/witewall_3.png","path":"images/witewall_3.png","modified":0,"renderable":0},{"_id":"source/images/abstract-12.jpg","path":"images/abstract-12.jpg","modified":0,"renderable":0},{"_id":"source/images/abstract-2.jpg","path":"images/abstract-2.jpg","modified":0,"renderable":0},{"_id":"source/images/abstract-11.jpg","path":"images/abstract-11.jpg","modified":0,"renderable":0},{"_id":"source/images/fix-space/excerpt.png","path":"images/fix-space/excerpt.png","modified":0,"renderable":0},{"_id":"source/images/fix-space/no-space.png","path":"images/fix-space/no-space.png","modified":0,"renderable":0},{"_id":"source/images/fix-space/space.png","path":"images/fix-space/space.png","modified":0,"renderable":0},{"_id":"source/images/fix-space/wrong-excerpt.png","path":"images/fix-space/wrong-excerpt.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/js/echo.min.js","path":"js/echo.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1482840009657},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1482840009657},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1482840009657},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1482840009657},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1482840009657},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1482840009657},{"_id":"source/_posts/2014-02-20-golang-traps.md","hash":"5233d71b8f3e03fb84f3e157ca53d9720a579805","modified":1482842783535},{"_id":"source/_posts/2014-02-23-fix-newline-to-space.md","hash":"3ad92ac227cf6bce21f5b33a4575fd8f17f38fd7","modified":1482842426276},{"_id":"source/_posts/2014-03-09-bit-getter-and-setter.md","hash":"588b52eb52a4bfca72fd167b29ec6af91c1c69ce","modified":1482842426276},{"_id":"source/_posts/2014-06-20-golang-reflect-101.md","hash":"787e2e1160728beb339a82ed3fc7dfafa1c943d5","modified":1482842682170},{"_id":"source/_posts/2016-08-09-interview.md","hash":"227d373cbbcf70b58acaff16419a4df9da601708","modified":1482842426276},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1482842426276},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1482840009657},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1482840009657},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1482840009657},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1482840009657},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1482840009657},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1482840009657},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1482840009657},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1482840009657},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1482840009657},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1482840009657},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1482840009657},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1482840009657},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1482840009657},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1482840009657},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1482840009657},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"f01f8b45af9c1464e89923fc62e91a68ac3bd652","modified":1482844395681},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1482840009657},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1482840009657},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1482840009657},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1482840009657},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1482840009657},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1482840009657},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1482840009657},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1482840009657},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1482840009657},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1482840009657},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1482840009657},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1482840009657},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1482840009657},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1482840009657},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1482840009657},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1482840009657},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1482840009657},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1482840009657},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1482840009657},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1482840009657},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1482840009657},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1482840009657},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1482840009657},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1482840009657},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1482840009657},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1482840009657},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1482840009661},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1482840009657},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1482840009657},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1482840009657},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1482840009657},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1482840009657},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1482840009657},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1482840009657},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1482840009657},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1482840009657},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1482840009657},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1482840009657},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1482840009657},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1482840009657},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1482840009657},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1482840009657},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1482840009657},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1482840009657},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1482840009657},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1482840009661},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1482840009661},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1482840009661},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1482840009661},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1482840009661},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1482840009661},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1482840009657},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1482840009657},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1482840009657},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1482840009657},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1482840009657},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1482840009657},{"_id":"source/_posts/.2014-02-23-fix-newline-to-space.md.swp","hash":"5fbbe1201497d928cea2724410fb172ef09c631b","modified":1482842615722},{"_id":"source/_posts/.2014-03-09-bit-getter-and-setter.md.swp","hash":"f3728b6636f09a2a2d7342a6bc0ba0d25880ed43","modified":1482842615882},{"_id":"source/_posts/.2014-06-20-golang-reflect-101.md.swp","hash":"44f443fcf4d1fc6889937765447451ac3875150e","modified":1482842616042},{"_id":"source/_posts/.2016-08-09-interview.md.swp","hash":"534cb3a90bd554711ea3ab543ec56f6226b120b2","modified":1482842616190},{"_id":"source/_posts/.hello-world.md.swp","hash":"b7ed48228b41c4b2ded4747ab317a44d5269678e","modified":1482842616338},{"_id":"source/images/404.jpg","hash":"45e6e7b5612fe4a0e647c17d978e02c690cfbf98","modified":1480148485065},{"_id":"source/images/abstract-1.jpg","hash":"d0715ea88f6d2b141fc61a26ebdc2bdae5e22daf","modified":1480148485065},{"_id":"source/images/abstract-10.jpg","hash":"a28c4d5b2d376a27b6cb110618ed5f5015db8b88","modified":1480148485065},{"_id":"source/images/abstract-3.jpg","hash":"f9cfd59619122ce6abd3c16773e2b94dd30e8a14","modified":1480148485073},{"_id":"source/images/abstract-4.jpg","hash":"ec72f4266c0b8b26c54acd3cf0592ffbd2b0cd83","modified":1480148485073},{"_id":"source/images/abstract-5.jpg","hash":"59e43d16c6c0e78a570b1c048a7e1ee6b2a66809","modified":1480148485073},{"_id":"source/images/abstract-6.jpg","hash":"5ed0c433cbbfa810f85fe44bac49a01abd722cba","modified":1480148485073},{"_id":"source/images/abstract-7.jpg","hash":"461d49385ff51918bc8f951a64c4811a31a77170","modified":1480148485073},{"_id":"source/images/abstract-8.jpg","hash":"5927dc5eff774995feca29cbe2ab0a3c53f22130","modified":1480148485073},{"_id":"source/images/apple-touch-icon-114x114-precomposed.png","hash":"32556c3f89d788aa4eb03cabdb5bda684ffe1679","modified":1480148485073},{"_id":"source/images/apple-touch-icon-144x144-precomposed.png","hash":"1e0ba3f796cd4f3d165a4d206c0e69c6db711f0b","modified":1480148485073},{"_id":"source/images/apple-touch-icon-72x72-precomposed.png","hash":"14ada7918fa4624e9c703a2e9117f04e50639d6a","modified":1480148485073},{"_id":"source/images/apple-touch-icon-precomposed.png","hash":"c7c04b737e886c27e0aa5dafba566071d1546eeb","modified":1480148485073},{"_id":"source/images/avatar.jpg","hash":"b0589b351270e30da35173ed77f5f119f5e4260a","modified":1480148485073},{"_id":"source/images/disqus-logo.png","hash":"4fe1a39d778dd25b23ff10a4a0d5a452623ababf","modified":1480148485073},{"_id":"source/images/ps_neutral.png","hash":"a62481b2e72e47998037546955888b7aa7332f62","modified":1480148485073},{"_id":"source/images/retina_dust.png","hash":"777a264d46413a1ce858760699b43d7e67e1ffa1","modified":1480148485073},{"_id":"source/images/witewall_3.png","hash":"9e51828b40a266b9116be0e8ae2f89d525a4087d","modified":1480148485073},{"_id":"source/images/abstract-12.jpg","hash":"1909308a3be803cb2a8884fee01544c374e0f671","modified":1480148485073},{"_id":"source/images/abstract-2.jpg","hash":"8c427ec200839e10e871857fbc485cf8a0f89783","modified":1480148485073},{"_id":"source/images/abstract-11.jpg","hash":"5530006198c8661d073c2abe6450c5281f2c1f9b","modified":1480148485073},{"_id":"source/images/fix-space/excerpt.png","hash":"a916a640858d9a2f39a16ae7fc667ef6e0e5f4b3","modified":1480148485073},{"_id":"source/images/fix-space/no-space.png","hash":"c31f2ef64a6cd72b985197fb8cf7feaed91eea6e","modified":1480148485073},{"_id":"source/images/fix-space/space.png","hash":"a56cd88b64fe69f68d57b359ec7b6f96867bec33","modified":1480148485073},{"_id":"source/images/fix-space/wrong-excerpt.png","hash":"972d85aeb1ede143af554b55f65508a85394dea7","modified":1480148485073},{"_id":"source/assets/css/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480148485065},{"_id":"source/assets/css/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480148485065},{"_id":"source/assets/css/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480148485065},{"_id":"source/assets/css/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480148485065},{"_id":"source/assets/css/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480148485065},{"_id":"source/assets/css/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480148485065},{"_id":"source/assets/css/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1480148485065},{"_id":"source/assets/fonts/fontawesome-webfont.eot","hash":"129680514386b94ceadd702a36113bf223724238","modified":1480148485065},{"_id":"source/assets/fonts/fontawesome-webfont.ttf","hash":"5c308120b2ae1c4a3cecd12d7fcf061d187f8f00","modified":1480148485065},{"_id":"source/assets/fonts/fontawesome-webfont.woff","hash":"0198673fae4bd22a32a44790e94e702755ba18a9","modified":1480148485065},{"_id":"source/assets/less/coderay.less","hash":"6eb5292c16a90277a90237878fb4cd8e45a03f4f","modified":1480148485065},{"_id":"source/assets/less/disqus.less","hash":"ebc42a4ccd764c8dbc91ef40ea921f5e85f1a043","modified":1480148485065},{"_id":"source/assets/less/dl-menu.less","hash":"c47aef0285a40e425f1affa1a8768c4d21a8a329","modified":1480148485065},{"_id":"source/assets/less/elements.less","hash":"53797dac73c781ee6aac0d9a21c8cecbaabaebbd","modified":1480148485065},{"_id":"source/assets/less/font-awesome.less","hash":"a696f6b2a124d43719d1e092eaec0f8c0be49fdb","modified":1480148485065},{"_id":"source/assets/less/gist.less","hash":"fc7e8825ccbaa2cbf05f2dc9a7d57ae7a85ff990","modified":1480148485065},{"_id":"source/assets/less/grid.less","hash":"b9be93660aecce131fc1b43e35e22dce5979db5e","modified":1480148485065},{"_id":"source/assets/less/magnific-popup.less","hash":"ce2769e9603a83c14f563c26ba4994c077d81cb2","modified":1480148485065},{"_id":"source/assets/less/main.less","hash":"3657a246543263089a1188919ad9422acbd0f04f","modified":1480148485065},{"_id":"source/assets/less/mixins.less","hash":"353788769d8710ef3769302a03c57b09157ed8c0","modified":1480148485065},{"_id":"source/assets/less/page.less","hash":"c7aa9e975d9db4fe5aecbc0c6073e2425fb4a125","modified":1480148485065},{"_id":"source/assets/less/pygments.less","hash":"797c092e207ea3880f281a39f83a5fedf37a36f6","modified":1480148485065},{"_id":"source/assets/less/reset.less","hash":"1c60a772d0e5edb436b6e7149f4ce6c1ce761dec","modified":1480148485065},{"_id":"source/assets/less/site.less","hash":"c3bba88da798320e653368009816740327c49b59","modified":1480148485065},{"_id":"source/assets/less/typography.less","hash":"50bb14b331b48c974df44d1bb34d697ae9e547b1","modified":1480148485065},{"_id":"source/assets/less/variables.less","hash":"4fea98b4b15b682d82e71b2f9a2323044ce73265","modified":1480148485065},{"_id":"source/assets/fonts/FontAwesome.otf","hash":"ce6cdf93a50378ce854a5d023c4204b5d8ed1181","modified":1480148485065},{"_id":"source/assets/js/_main.js","hash":"70bf2004ccdae2dff5066efaea9a0d2581c1e4ac","modified":1480148485065},{"_id":"source/assets/css/main.css","hash":"84518f3bbbfeb4f0510f1107ea2e18330587a1f0","modified":1480148485065},{"_id":"source/assets/assets/css/main.min.css","hash":"1df875ce0ae58403b2762c87470e4f1b1098b5b1","modified":1480148485057},{"_id":"source/assets/assets/fonts/FontAwesome.otf","hash":"ce6cdf93a50378ce854a5d023c4204b5d8ed1181","modified":1480148485057},{"_id":"source/assets/assets/fonts/fontawesome-webfont.eot","hash":"129680514386b94ceadd702a36113bf223724238","modified":1480148485057},{"_id":"source/assets/assets/fonts/fontawesome-webfont.ttf","hash":"5c308120b2ae1c4a3cecd12d7fcf061d187f8f00","modified":1480148485057},{"_id":"source/assets/assets/fonts/fontawesome-webfont.woff","hash":"0198673fae4bd22a32a44790e94e702755ba18a9","modified":1480148485057},{"_id":"source/assets/assets/js/scripts.min.js","hash":"89c92ef0b99039a85acbcc606dc5f6602d7bc080","modified":1480148485057},{"_id":"source/assets/assets/less/coderay.less","hash":"6eb5292c16a90277a90237878fb4cd8e45a03f4f","modified":1480148485057},{"_id":"source/assets/assets/less/dl-menu.less","hash":"653e62f4a86df7c1b56c8380063face0e05b3860","modified":1480148485057},{"_id":"source/assets/assets/less/elements.less","hash":"53797dac73c781ee6aac0d9a21c8cecbaabaebbd","modified":1480148485057},{"_id":"source/assets/assets/less/font-awesome.less","hash":"a696f6b2a124d43719d1e092eaec0f8c0be49fdb","modified":1480148485057},{"_id":"source/assets/assets/less/gist.less","hash":"fc7e8825ccbaa2cbf05f2dc9a7d57ae7a85ff990","modified":1480148485057},{"_id":"source/assets/assets/less/magnific-popup.less","hash":"ce2769e9603a83c14f563c26ba4994c077d81cb2","modified":1480148485057},{"_id":"source/assets/assets/less/grid.less","hash":"b9be93660aecce131fc1b43e35e22dce5979db5e","modified":1480148485057},{"_id":"source/assets/assets/less/main.less","hash":"0ed2e02b3ecf067241fb19adda512b3a944fbc76","modified":1480148485057},{"_id":"source/assets/assets/less/mixins.less","hash":"353788769d8710ef3769302a03c57b09157ed8c0","modified":1480148485057},{"_id":"source/assets/assets/less/page.less","hash":"c7aa9e975d9db4fe5aecbc0c6073e2425fb4a125","modified":1480148485057},{"_id":"source/assets/assets/less/pygments.less","hash":"797c092e207ea3880f281a39f83a5fedf37a36f6","modified":1480148485057},{"_id":"source/assets/assets/js/_main.js","hash":"70bf2004ccdae2dff5066efaea9a0d2581c1e4ac","modified":1480148485057},{"_id":"source/assets/assets/less/reset.less","hash":"1c60a772d0e5edb436b6e7149f4ce6c1ce761dec","modified":1480148485065},{"_id":"source/assets/assets/less/site.less","hash":"c3bba88da798320e653368009816740327c49b59","modified":1480148485065},{"_id":"source/assets/assets/less/variables.less","hash":"4fea98b4b15b682d82e71b2f9a2323044ce73265","modified":1480148485065},{"_id":"source/assets/assets/less/typography.less","hash":"50bb14b331b48c974df44d1bb34d697ae9e547b1","modified":1480148485065},{"_id":"source/assets/fonts/fontawesome-webfont.svg","hash":"188cad0680a1cabeef1ce6b5d86a4a7bd7cec317","modified":1480148485065},{"_id":"source/assets/js/plugins/jquery.dlmenu.js","hash":"c9a9b48d8501232af1ee5502b5428ff64f0901b9","modified":1480148485065},{"_id":"source/assets/js/plugins/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1480148485065},{"_id":"source/assets/js/plugins/jquery.fitvids.js","hash":"3d485b894fc1c432ee89c13deffbf6f8ceee3b87","modified":1480148485065},{"_id":"source/assets/js/plugins/respond.js","hash":"9bb628ae2cca2832916f1f9fa2a4b0b71af4c4e3","modified":1480148485065},{"_id":"source/assets/js/plugins/jquery.magnific-popup.js","hash":"b51bd8bfcc8cd78da148b96695cdc6862bfb560f","modified":1480148485065},{"_id":"source/assets/js/plugins/socialcount.js","hash":"8746cf1f1578fa2a655886905744ef084bcd1e1c","modified":1480148485065},{"_id":"source/assets/js/vendor/echo.min.js","hash":"9701eeaa97af124cc05336377920706037b20c8f","modified":1480148485065},{"_id":"source/assets/js/vendor/modernizr-2.6.2.custom.min.js","hash":"def18f2d7d0282415f7af9637864038753bc14a3","modified":1480148485065},{"_id":"source/assets/less/font-awesome/bordered-pulled.less","hash":"0469b430cd1567145ba800b22537588be2d1934d","modified":1480148485065},{"_id":"source/assets/less/font-awesome/core.less","hash":"8286f2139fdd27c974385354c2ec24d4ec3b2537","modified":1480148485065},{"_id":"source/assets/less/font-awesome/fixed-width.less","hash":"ec0c24b97184dab86177660f486b8d08cd636c42","modified":1480148485065},{"_id":"source/assets/less/font-awesome/font-awesome.less","hash":"a696f6b2a124d43719d1e092eaec0f8c0be49fdb","modified":1480148485065},{"_id":"source/assets/less/font-awesome/icons.less","hash":"ef5a83dd6b4d767500c8896ebf9b220fae5f2725","modified":1480148485065},{"_id":"source/assets/less/font-awesome/larger.less","hash":"e7119e82dc50540dbc3472bba7d74282815a7ecc","modified":1480148485065},{"_id":"source/assets/less/font-awesome/list.less","hash":"b31f32ff393e3fa2f5c72d4a81c63871e61071ab","modified":1480148485065},{"_id":"source/assets/less/font-awesome/mixins.less","hash":"c46690a1efdea1d83c43063ec43d46f289d9b140","modified":1480148485065},{"_id":"source/assets/less/font-awesome/path.less","hash":"251ce312901aedbf312b98b5c16d61e57c47c0b5","modified":1480148485065},{"_id":"source/assets/less/font-awesome/rotated-flipped.less","hash":"6f63cbd44038b355cec327ce247008672f89cc3c","modified":1480148485065},{"_id":"source/assets/less/font-awesome/spinning.less","hash":"af2cc49f427418a1af60a70c32ff8aad9cf4cb15","modified":1480148485065},{"_id":"source/assets/less/font-awesome/stacked.less","hash":"f044077bc8be1a989c245254e81eb084d52d29a7","modified":1480148485065},{"_id":"source/assets/less/font-awesome/variables.less","hash":"a07d36c5820dc8969e3255e1122bc52be0151cd2","modified":1480148485065},{"_id":"source/assets/assets/css/main.css","hash":"4e86dbac872947f0c2e7fe1438a4adb5827503de","modified":1480148485057},{"_id":"source/assets/js/vendor/jquery-1.9.1.min.js","hash":"ae49e56999d82802727455f0ba83b63acd90a22b","modified":1480148485065},{"_id":"source/assets/assets/fonts/fontawesome-webfont.svg","hash":"188cad0680a1cabeef1ce6b5d86a4a7bd7cec317","modified":1480148485057},{"_id":"source/assets/assets/js/plugins/jquery.dlmenu.js","hash":"cef57c202f551304372566270eea702b60c6d4bb","modified":1480148485057},{"_id":"source/assets/assets/js/plugins/jquery.fitvids.js","hash":"3d485b894fc1c432ee89c13deffbf6f8ceee3b87","modified":1480148485057},{"_id":"source/assets/assets/js/plugins/jquery.magnific-popup.js","hash":"b51bd8bfcc8cd78da148b96695cdc6862bfb560f","modified":1480148485057},{"_id":"source/assets/assets/js/plugins/respond.js","hash":"9bb628ae2cca2832916f1f9fa2a4b0b71af4c4e3","modified":1480148485057},{"_id":"source/assets/assets/js/vendor/modernizr-2.6.2.custom.min.js","hash":"def18f2d7d0282415f7af9637864038753bc14a3","modified":1480148485057},{"_id":"source/assets/assets/less/font-awesome/bordered-pulled.less","hash":"0469b430cd1567145ba800b22537588be2d1934d","modified":1480148485057},{"_id":"source/assets/assets/less/font-awesome/core.less","hash":"8286f2139fdd27c974385354c2ec24d4ec3b2537","modified":1480148485057},{"_id":"source/assets/assets/less/font-awesome/fixed-width.less","hash":"ec0c24b97184dab86177660f486b8d08cd636c42","modified":1480148485057},{"_id":"source/assets/assets/less/font-awesome/font-awesome.less","hash":"a696f6b2a124d43719d1e092eaec0f8c0be49fdb","modified":1480148485057},{"_id":"source/assets/assets/less/font-awesome/icons.less","hash":"ef5a83dd6b4d767500c8896ebf9b220fae5f2725","modified":1480148485057},{"_id":"source/assets/assets/less/font-awesome/larger.less","hash":"e7119e82dc50540dbc3472bba7d74282815a7ecc","modified":1480148485057},{"_id":"source/assets/assets/less/font-awesome/list.less","hash":"b31f32ff393e3fa2f5c72d4a81c63871e61071ab","modified":1480148485057},{"_id":"source/assets/assets/less/font-awesome/mixins.less","hash":"c46690a1efdea1d83c43063ec43d46f289d9b140","modified":1480148485057},{"_id":"source/assets/assets/less/font-awesome/path.less","hash":"251ce312901aedbf312b98b5c16d61e57c47c0b5","modified":1480148485057},{"_id":"source/assets/assets/less/font-awesome/rotated-flipped.less","hash":"6f63cbd44038b355cec327ce247008672f89cc3c","modified":1480148485057},{"_id":"source/assets/assets/less/font-awesome/spinning.less","hash":"af2cc49f427418a1af60a70c32ff8aad9cf4cb15","modified":1480148485057},{"_id":"source/assets/assets/less/font-awesome/stacked.less","hash":"f044077bc8be1a989c245254e81eb084d52d29a7","modified":1480148485057},{"_id":"source/assets/assets/less/font-awesome/variables.less","hash":"a07d36c5820dc8969e3255e1122bc52be0151cd2","modified":1480148485057},{"_id":"source/assets/assets/js/vendor/jquery-1.9.1.min.js","hash":"ae49e56999d82802727455f0ba83b63acd90a22b","modified":1480148485057},{"_id":"themes/landscape/scripts/echo.min.js","hash":"4714edb09d0d6d2cd8c91fa4f4fd158513b2ae7d","modified":1482844216263},{"_id":"themes/landscape/layout/_partial/.after-footer.ejs.swp","hash":"7256bd633abac9201b1673f7ea275415d6e522e0","modified":1482844438660},{"_id":"themes/landscape/source/js/echo.min.js","hash":"4714edb09d0d6d2cd8c91fa4f4fd158513b2ae7d","modified":1482844216263}],"Category":[],"Data":[],"Page":[],"Post":[{"layout":"post","title":"Golang Traps","description":"record golang's traps","modified":"2014-02-21T16:00:00.000Z","image":{"feature":"abstract-3.jpg","credit":"dargadgetz","creditlink":"http://www.dargadgetz.com/ios-7-abstract-wallpaper-pack-for-iphone-5-and-ipod-touch-retina/"},"comments":1,"share":true,"_content":"\n这段时间，在公司项目中使用了golang，感觉golang的确有他独到的地方，尤其是\ngoroutine和channel使事情变的简单。可是作为一门新的语言golang仍然会有不少的问题\n，例如没有检测文件是否存在的函数，没有拷贝文件的函数等等，诸如此类，除了这类问\n题以外还存在一些与直觉有所不同的问题，此篇博客将会持续记录在使用golang的过程中\n遇到的一些问题。\n\n\n## 没有检测文件是否存在的函数\n\n这个问题是我无意中在某项目中看到解决方案时发现的，解决方案也比较简单。\n\n~~~go\nfunc Exist(path string) {\n    _, err := os.Stat(path)\n    return err == nil || os.IsExist(err)\n}\n~~~\n\n\n## 没有拷贝文件的函数\n\n关于这一点，在github上有一个[项目](https://github.com/daaku/go.copyfile)可以一\n定程度上的解决这个问题，不过这个项目还有待完善，而且我个人感觉很不习惯。\n\n\n## filepath.Walk\n\n这个问题是今天(2014-02-20)遇到的，当我天真的以为对一个不存在的路径进行Walk的时候，此函数什\n么也不会做，然后像其他函数一样返回错误给我的时候，可结果却是该函数仍然会调用回\n调函数。后来在文档中发现了这个小秘密，**所有**错误都在回调函数中通过第三个参数处理。我之前还在纳闷回调中的第三个参数有什么用，显然这是我没有仔细阅读文档而相当然的错。\n\n~~~go\npackage main\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc main() {\n\tnotExistedPath := \"/notExistedPath\"\n\tfilepath.Walk(\n\t\tnotExistedPath,\n\t\tfunc(path string, info os.FileInfo, e error) error {\n\t\t\tfmt.Println(\"invoked\",\n\t\t\t\t\"\\npath is:\", path,\n\t\t\t\t\"\\ninfo is:\", info,\n\t\t\t\t\"\\nerror is:\", e)\n\t\t\treturn nil\n\t\t},\n\t)\n}\n~~~\n\n\n## flag.Bool\n\n在吐槽这个之前，先简单的介绍一下命令行参数吧。命令行参数大致分为option（选项）/argument（参数）/command（命令）三种类型。\n\noption的作用是改变程序的行为，通常具有长和短两种形式，根据选项行为可分为switches(开关)和flags（标志）两类。switches通常用于开启或关闭某项功能，不接受任何参数，而flags则通常需要接受参数。\n\nargument通常是命令行中除去option的部分，被操作的对象，可能是文件或者目录等等。\n\n与option和argument不同，command具有更明确的意义，用来管理一些列复杂的行为。使一些比较复杂的程序，例如git，更易于使用和管理。同时，由于command的出现导致option分为了global option和command option。\n\n关于命令行更详细的介绍《python标准库》中关于命令行模块和《Build Awesome Command-Line Applications in Ruby 2》都是不错的资料。\n\n言归正传，go语言中flag.Bool是典型的开关型选项。在使用前，当然要写一个小程序来学习一下：\n~~~go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar b bool\n\tflag.BoolVar(&b, \"b\", false, \"description for b\")\n\tflag.Parse()\n\tfmt.Println(b)\n}\n~~~\n\n测试：\n~~~bash\n% go run test.go\nfalse\n% go run test.go -b\ntrue\n~~~\n\n这个程序很简单，使用方式也很简单，并且程序的运行结果也正是所期待的结果。我再次天真的以为没问题了。接下来试一下另外一个程序吧。\n~~~go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar b bool\n\tflag.BoolVar(&b, \"b\", true, \"description for b\")\n\tflag.Parse()\n\tfmt.Println(b)\n}\n~~~\n\n测试：\n~~~bash\n% go run test.go\ntrue\n% go run test.go -b\ntrue\n~~~\n\nWTF!!!您这是闹哪样啊，欺负新来的是吧，你还可以再叼一点没关系的。好吧，我承认我又没读文档，因为在文档上找到了这样一句话：\n>You must use the -flag=false form to turn off a boolean flag.\n\n事实再一次教育我，Please RTFM carefully。只是我实在无法理解这样一种设计是出于何种原因。\n\nUPDATE：发现一个不错的命令行解析库[kingpin](https://github.com/alecthomas/kingpin)。\n\n\n## url\n\n前段时间在处理背景图片的时候遇到一个问题，那就是url中空格的问题，空格无法直接使\n用，需要转换为`%20`，而在go语言中正好有一个url的包，不过url包略有小坑。\n在url包中有一个叫`url.QueryEscape`的全局函数，咋一看这似乎就是所需的函数。\n~~~go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/url\"\n)\n\nfunc main() {\n\tfmt.Println(url.QueryEscape(\"a b\"))\n}\n~~~\n得到的结果是：\n~~~bash\na+b\n~~~\n\n这个必须不是正确的结果。那么在go中到底有没有需要的函数呢？在网上查了老半天，\nstackoverflow上也有类似的问题，不过却并没有的到解答。处于无奈，只能去看源代码了\n，还好是开源的。在go的url包的源代码中发现却是存在将空格转换成`%20`的代码段，仔\n细看看了，发现`String()`函数就是寻找的函数。\n~~~go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/url\"\n)\n\nfunc main() {\n\tfmt.Println(url.Parse(\"a b\"))\n}\n~~~\n\n输出结果为：\n~~~bash\na%20b <nil>\n~~~\n\n小结一下：\n<pre>\n|javascript        |golang         |\n|------------------|---------------|\n|encodeURI         |URL.String     |\n|escape            |url.QueryEscape|\n|encodeURIComponent|none           |\n</pre>\n\n也许encodeURIComponent可以通过其他方法组合实现，但是却并没有提供一个单独的函数\n来。\n\n\n## unsetenv\n\n公司同事在写网络代理相关的代码，在设置系统代理时会设值环境变量，在设置和清空环境变量方面golang还是很方便的，只需要使用`os.Setenv`即可，可是如果需要删除一个环境变量时该怎么办呢？经过我的探索，sorry，在golang中目前并没有unsetenv函数，不过似乎已经有准备在以后的版本中将unsetenv添加到`os`包中。那么现在要使用unsetenv该怎么办呢？\n于是同事写了一个UnsetEnv函数：\n~~~go\nfunc UnsetEnv(envName string) (err error) {\n\tenvs := os.Environ()\n\tnewEnvsData := make(map[string]string)\n\tfor _, e := range envs {\n\t\ta := strings.SplitN(e, \"=\", 2)\n\t\tvar name, value string\n\t\tif len(a) == 2 {\n\t\t\tname = a[0]\n\t\t\tvalue = a[1]\n\t\t} else {\n\t\t\tname = a[0]\n\t\t\tvalue = \"\"\n\t\t}\n\t\tif name != envName {\n\t\t\tnewEnvsData[name] = value\n\t\t}\n\t}\n\tos.Clearenv()\n\tfor e, v := range newEnvsData {\n\t\terr = os.Setenv(e, v)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\treturn\n}\n~~~\n\n这个函数在某些程序中确实可以正确的运行，可是在测试过程中我们发现这个函数对通过C绑定的gio函数调用的程序并没有生效，于是就想到使用C中的`unsetenv`函数，便有了以下的函数：\n~~~go\nfunc UnsetEnv(_name string) {\n\tname := C.CString(_name)\n\tdefer C.free(name)\n\tC.unsetenv(name)\n}\n~~~\n\n确实C绑定的函数调用的程序生效了，可是通过golang调用的程序却不生效了==，最后只有将两个函数柔和在一起才能生效。\n\n我们并没有深入挖掘这个问题，也并不是非常确定是不是我们使用的姿势不对，这里仅供参考。\n","source":"_posts/2014-02-20-golang-traps.md","raw":"---\nlayout: post\ntitle: Golang Traps\ndescription: \"record golang's traps\"\nmodified: 2014-02-22\ntags: ['golang', 'go']\nimage:\n  feature: abstract-3.jpg\n  credit: dargadgetz\n  creditlink: http://www.dargadgetz.com/ios-7-abstract-wallpaper-pack-for-iphone-5-and-ipod-touch-retina/\ncomments: true\nshare: true\n---\n\n这段时间，在公司项目中使用了golang，感觉golang的确有他独到的地方，尤其是\ngoroutine和channel使事情变的简单。可是作为一门新的语言golang仍然会有不少的问题\n，例如没有检测文件是否存在的函数，没有拷贝文件的函数等等，诸如此类，除了这类问\n题以外还存在一些与直觉有所不同的问题，此篇博客将会持续记录在使用golang的过程中\n遇到的一些问题。\n\n\n## 没有检测文件是否存在的函数\n\n这个问题是我无意中在某项目中看到解决方案时发现的，解决方案也比较简单。\n\n~~~go\nfunc Exist(path string) {\n    _, err := os.Stat(path)\n    return err == nil || os.IsExist(err)\n}\n~~~\n\n\n## 没有拷贝文件的函数\n\n关于这一点，在github上有一个[项目](https://github.com/daaku/go.copyfile)可以一\n定程度上的解决这个问题，不过这个项目还有待完善，而且我个人感觉很不习惯。\n\n\n## filepath.Walk\n\n这个问题是今天(2014-02-20)遇到的，当我天真的以为对一个不存在的路径进行Walk的时候，此函数什\n么也不会做，然后像其他函数一样返回错误给我的时候，可结果却是该函数仍然会调用回\n调函数。后来在文档中发现了这个小秘密，**所有**错误都在回调函数中通过第三个参数处理。我之前还在纳闷回调中的第三个参数有什么用，显然这是我没有仔细阅读文档而相当然的错。\n\n~~~go\npackage main\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc main() {\n\tnotExistedPath := \"/notExistedPath\"\n\tfilepath.Walk(\n\t\tnotExistedPath,\n\t\tfunc(path string, info os.FileInfo, e error) error {\n\t\t\tfmt.Println(\"invoked\",\n\t\t\t\t\"\\npath is:\", path,\n\t\t\t\t\"\\ninfo is:\", info,\n\t\t\t\t\"\\nerror is:\", e)\n\t\t\treturn nil\n\t\t},\n\t)\n}\n~~~\n\n\n## flag.Bool\n\n在吐槽这个之前，先简单的介绍一下命令行参数吧。命令行参数大致分为option（选项）/argument（参数）/command（命令）三种类型。\n\noption的作用是改变程序的行为，通常具有长和短两种形式，根据选项行为可分为switches(开关)和flags（标志）两类。switches通常用于开启或关闭某项功能，不接受任何参数，而flags则通常需要接受参数。\n\nargument通常是命令行中除去option的部分，被操作的对象，可能是文件或者目录等等。\n\n与option和argument不同，command具有更明确的意义，用来管理一些列复杂的行为。使一些比较复杂的程序，例如git，更易于使用和管理。同时，由于command的出现导致option分为了global option和command option。\n\n关于命令行更详细的介绍《python标准库》中关于命令行模块和《Build Awesome Command-Line Applications in Ruby 2》都是不错的资料。\n\n言归正传，go语言中flag.Bool是典型的开关型选项。在使用前，当然要写一个小程序来学习一下：\n~~~go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar b bool\n\tflag.BoolVar(&b, \"b\", false, \"description for b\")\n\tflag.Parse()\n\tfmt.Println(b)\n}\n~~~\n\n测试：\n~~~bash\n% go run test.go\nfalse\n% go run test.go -b\ntrue\n~~~\n\n这个程序很简单，使用方式也很简单，并且程序的运行结果也正是所期待的结果。我再次天真的以为没问题了。接下来试一下另外一个程序吧。\n~~~go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar b bool\n\tflag.BoolVar(&b, \"b\", true, \"description for b\")\n\tflag.Parse()\n\tfmt.Println(b)\n}\n~~~\n\n测试：\n~~~bash\n% go run test.go\ntrue\n% go run test.go -b\ntrue\n~~~\n\nWTF!!!您这是闹哪样啊，欺负新来的是吧，你还可以再叼一点没关系的。好吧，我承认我又没读文档，因为在文档上找到了这样一句话：\n>You must use the -flag=false form to turn off a boolean flag.\n\n事实再一次教育我，Please RTFM carefully。只是我实在无法理解这样一种设计是出于何种原因。\n\nUPDATE：发现一个不错的命令行解析库[kingpin](https://github.com/alecthomas/kingpin)。\n\n\n## url\n\n前段时间在处理背景图片的时候遇到一个问题，那就是url中空格的问题，空格无法直接使\n用，需要转换为`%20`，而在go语言中正好有一个url的包，不过url包略有小坑。\n在url包中有一个叫`url.QueryEscape`的全局函数，咋一看这似乎就是所需的函数。\n~~~go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/url\"\n)\n\nfunc main() {\n\tfmt.Println(url.QueryEscape(\"a b\"))\n}\n~~~\n得到的结果是：\n~~~bash\na+b\n~~~\n\n这个必须不是正确的结果。那么在go中到底有没有需要的函数呢？在网上查了老半天，\nstackoverflow上也有类似的问题，不过却并没有的到解答。处于无奈，只能去看源代码了\n，还好是开源的。在go的url包的源代码中发现却是存在将空格转换成`%20`的代码段，仔\n细看看了，发现`String()`函数就是寻找的函数。\n~~~go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/url\"\n)\n\nfunc main() {\n\tfmt.Println(url.Parse(\"a b\"))\n}\n~~~\n\n输出结果为：\n~~~bash\na%20b <nil>\n~~~\n\n小结一下：\n<pre>\n|javascript        |golang         |\n|------------------|---------------|\n|encodeURI         |URL.String     |\n|escape            |url.QueryEscape|\n|encodeURIComponent|none           |\n</pre>\n\n也许encodeURIComponent可以通过其他方法组合实现，但是却并没有提供一个单独的函数\n来。\n\n\n## unsetenv\n\n公司同事在写网络代理相关的代码，在设置系统代理时会设值环境变量，在设置和清空环境变量方面golang还是很方便的，只需要使用`os.Setenv`即可，可是如果需要删除一个环境变量时该怎么办呢？经过我的探索，sorry，在golang中目前并没有unsetenv函数，不过似乎已经有准备在以后的版本中将unsetenv添加到`os`包中。那么现在要使用unsetenv该怎么办呢？\n于是同事写了一个UnsetEnv函数：\n~~~go\nfunc UnsetEnv(envName string) (err error) {\n\tenvs := os.Environ()\n\tnewEnvsData := make(map[string]string)\n\tfor _, e := range envs {\n\t\ta := strings.SplitN(e, \"=\", 2)\n\t\tvar name, value string\n\t\tif len(a) == 2 {\n\t\t\tname = a[0]\n\t\t\tvalue = a[1]\n\t\t} else {\n\t\t\tname = a[0]\n\t\t\tvalue = \"\"\n\t\t}\n\t\tif name != envName {\n\t\t\tnewEnvsData[name] = value\n\t\t}\n\t}\n\tos.Clearenv()\n\tfor e, v := range newEnvsData {\n\t\terr = os.Setenv(e, v)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\treturn\n}\n~~~\n\n这个函数在某些程序中确实可以正确的运行，可是在测试过程中我们发现这个函数对通过C绑定的gio函数调用的程序并没有生效，于是就想到使用C中的`unsetenv`函数，便有了以下的函数：\n~~~go\nfunc UnsetEnv(_name string) {\n\tname := C.CString(_name)\n\tdefer C.free(name)\n\tC.unsetenv(name)\n}\n~~~\n\n确实C绑定的函数调用的程序生效了，可是通过golang调用的程序却不生效了==，最后只有将两个函数柔和在一起才能生效。\n\n我们并没有深入挖掘这个问题，也并不是非常确定是不是我们使用的姿势不对，这里仅供参考。\n","slug":"2014-02-20-golang-traps","published":1,"date":"2016-12-27T12:46:23.535Z","updated":"2016-12-27T12:46:23.535Z","_id":"cix7i6ar50000271j2l33ndoj","photos":[],"link":"","content":"<p>这段时间，在公司项目中使用了golang，感觉golang的确有他独到的地方，尤其是<br>goroutine和channel使事情变的简单。可是作为一门新的语言golang仍然会有不少的问题<br>，例如没有检测文件是否存在的函数，没有拷贝文件的函数等等，诸如此类，除了这类问<br>题以外还存在一些与直觉有所不同的问题，此篇博客将会持续记录在使用golang的过程中<br>遇到的一些问题。</p>\n<h2 id=\"没有检测文件是否存在的函数\"><a href=\"#没有检测文件是否存在的函数\" class=\"headerlink\" title=\"没有检测文件是否存在的函数\"></a>没有检测文件是否存在的函数</h2><p>这个问题是我无意中在某项目中看到解决方案时发现的，解决方案也比较简单。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Exist</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span></span> &#123;</div><div class=\"line\">    _, err := os.Stat(path)</div><div class=\"line\">    <span class=\"keyword\">return</span> err == <span class=\"literal\">nil</span> || os.IsExist(err)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"没有拷贝文件的函数\"><a href=\"#没有拷贝文件的函数\" class=\"headerlink\" title=\"没有拷贝文件的函数\"></a>没有拷贝文件的函数</h2><p>关于这一点，在github上有一个<a href=\"https://github.com/daaku/go.copyfile\" target=\"_blank\" rel=\"external\">项目</a>可以一<br>定程度上的解决这个问题，不过这个项目还有待完善，而且我个人感觉很不习惯。</p>\n<h2 id=\"filepath-Walk\"><a href=\"#filepath-Walk\" class=\"headerlink\" title=\"filepath.Walk\"></a>filepath.Walk</h2><p>这个问题是今天(2014-02-20)遇到的，当我天真的以为对一个不存在的路径进行Walk的时候，此函数什<br>么也不会做，然后像其他函数一样返回错误给我的时候，可结果却是该函数仍然会调用回<br>调函数。后来在文档中发现了这个小秘密，<strong>所有</strong>错误都在回调函数中通过第三个参数处理。我之前还在纳闷回调中的第三个参数有什么用，显然这是我没有仔细阅读文档而相当然的错。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"os\"</span></div><div class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tnotExistedPath := <span class=\"string\">\"/notExistedPath\"</span></div><div class=\"line\">\tfilepath.Walk(</div><div class=\"line\">\t\tnotExistedPath,</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(path <span class=\"keyword\">string</span>, info os.FileInfo, e error)</span> <span class=\"title\">error</span></span> &#123;</div><div class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"invoked\"</span>,</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"\\npath is:\"</span>, path,</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"\\ninfo is:\"</span>, info,</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"\\nerror is:\"</span>, e)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"flag-Bool\"><a href=\"#flag-Bool\" class=\"headerlink\" title=\"flag.Bool\"></a>flag.Bool</h2><p>在吐槽这个之前，先简单的介绍一下命令行参数吧。命令行参数大致分为option（选项）/argument（参数）/command（命令）三种类型。</p>\n<p>option的作用是改变程序的行为，通常具有长和短两种形式，根据选项行为可分为switches(开关)和flags（标志）两类。switches通常用于开启或关闭某项功能，不接受任何参数，而flags则通常需要接受参数。</p>\n<p>argument通常是命令行中除去option的部分，被操作的对象，可能是文件或者目录等等。</p>\n<p>与option和argument不同，command具有更明确的意义，用来管理一些列复杂的行为。使一些比较复杂的程序，例如git，更易于使用和管理。同时，由于command的出现导致option分为了global option和command option。</p>\n<p>关于命令行更详细的介绍《python标准库》中关于命令行模块和《Build Awesome Command-Line Applications in Ruby 2》都是不错的资料。</p>\n<p>言归正传，go语言中flag.Bool是典型的开关型选项。在使用前，当然要写一个小程序来学习一下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"flag\"</span></div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> b <span class=\"keyword\">bool</span></div><div class=\"line\">\tflag.BoolVar(&amp;b, <span class=\"string\">\"b\"</span>, <span class=\"literal\">false</span>, <span class=\"string\">\"description for b\"</span>)</div><div class=\"line\">\tflag.Parse()</div><div class=\"line\">\tfmt.Println(b)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">% go run test.go</div><div class=\"line\"><span class=\"literal\">false</span></div><div class=\"line\">% go run test.go -b</div><div class=\"line\"><span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>这个程序很简单，使用方式也很简单，并且程序的运行结果也正是所期待的结果。我再次天真的以为没问题了。接下来试一下另外一个程序吧。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"flag\"</span></div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> b <span class=\"keyword\">bool</span></div><div class=\"line\">\tflag.BoolVar(&amp;b, <span class=\"string\">\"b\"</span>, <span class=\"literal\">true</span>, <span class=\"string\">\"description for b\"</span>)</div><div class=\"line\">\tflag.Parse()</div><div class=\"line\">\tfmt.Println(b)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">% go run test.go</div><div class=\"line\"><span class=\"literal\">true</span></div><div class=\"line\">% go run test.go -b</div><div class=\"line\"><span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>WTF!!!您这是闹哪样啊，欺负新来的是吧，你还可以再叼一点没关系的。好吧，我承认我又没读文档，因为在文档上找到了这样一句话：</p>\n<blockquote>\n<p>You must use the -flag=false form to turn off a boolean flag.</p>\n</blockquote>\n<p>事实再一次教育我，Please RTFM carefully。只是我实在无法理解这样一种设计是出于何种原因。</p>\n<p>UPDATE：发现一个不错的命令行解析库<a href=\"https://github.com/alecthomas/kingpin\" target=\"_blank\" rel=\"external\">kingpin</a>。</p>\n<h2 id=\"url\"><a href=\"#url\" class=\"headerlink\" title=\"url\"></a>url</h2><p>前段时间在处理背景图片的时候遇到一个问题，那就是url中空格的问题，空格无法直接使<br>用，需要转换为<code>%20</code>，而在go语言中正好有一个url的包，不过url包略有小坑。<br>在url包中有一个叫<code>url.QueryEscape</code>的全局函数，咋一看这似乎就是所需的函数。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"net/url\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tfmt.Println(url.QueryEscape(<span class=\"string\">\"a b\"</span>))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>得到的结果是：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a+b</div></pre></td></tr></table></figure></p>\n<p>这个必须不是正确的结果。那么在go中到底有没有需要的函数呢？在网上查了老半天，<br>stackoverflow上也有类似的问题，不过却并没有的到解答。处于无奈，只能去看源代码了<br>，还好是开源的。在go的url包的源代码中发现却是存在将空格转换成<code>%20</code>的代码段，仔<br>细看看了，发现<code>String()</code>函数就是寻找的函数。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"net/url\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tfmt.Println(url.Parse(<span class=\"string\">\"a b\"</span>))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果为：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a%20b &lt;nil&gt;</div></pre></td></tr></table></figure></p>\n<p>小结一下：</p>\n<pre>\n|javascript        |golang         |\n|------------------|---------------|\n|encodeURI         |URL.String     |\n|escape            |url.QueryEscape|\n|encodeURIComponent|none           |\n</pre>\n\n<p>也许encodeURIComponent可以通过其他方法组合实现，但是却并没有提供一个单独的函数<br>来。</p>\n<h2 id=\"unsetenv\"><a href=\"#unsetenv\" class=\"headerlink\" title=\"unsetenv\"></a>unsetenv</h2><p>公司同事在写网络代理相关的代码，在设置系统代理时会设值环境变量，在设置和清空环境变量方面golang还是很方便的，只需要使用<code>os.Setenv</code>即可，可是如果需要删除一个环境变量时该怎么办呢？经过我的探索，sorry，在golang中目前并没有unsetenv函数，不过似乎已经有准备在以后的版本中将unsetenv添加到<code>os</code>包中。那么现在要使用unsetenv该怎么办呢？<br>于是同事写了一个UnsetEnv函数：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UnsetEnv</span><span class=\"params\">(envName <span class=\"keyword\">string</span>)</span> <span class=\"params\">(err error)</span></span> &#123;</div><div class=\"line\">\tenvs := os.Environ()</div><div class=\"line\">\tnewEnvsData := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</div><div class=\"line\">\t<span class=\"keyword\">for</span> _, e := <span class=\"keyword\">range</span> envs &#123;</div><div class=\"line\">\t\ta := strings.SplitN(e, <span class=\"string\">\"=\"</span>, <span class=\"number\">2</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> name, value <span class=\"keyword\">string</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(a) == <span class=\"number\">2</span> &#123;</div><div class=\"line\">\t\t\tname = a[<span class=\"number\">0</span>]</div><div class=\"line\">\t\t\tvalue = a[<span class=\"number\">1</span>]</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tname = a[<span class=\"number\">0</span>]</div><div class=\"line\">\t\t\tvalue = <span class=\"string\">\"\"</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> name != envName &#123;</div><div class=\"line\">\t\t\tnewEnvsData[name] = value</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tos.Clearenv()</div><div class=\"line\">\t<span class=\"keyword\">for</span> e, v := <span class=\"keyword\">range</span> newEnvsData &#123;</div><div class=\"line\">\t\terr = os.Setenv(e, v)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个函数在某些程序中确实可以正确的运行，可是在测试过程中我们发现这个函数对通过C绑定的gio函数调用的程序并没有生效，于是就想到使用C中的<code>unsetenv</code>函数，便有了以下的函数：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UnsetEnv</span><span class=\"params\">(_name <span class=\"keyword\">string</span>)</span></span> &#123;</div><div class=\"line\">\tname := C.CString(_name)</div><div class=\"line\">\t<span class=\"keyword\">defer</span> C.free(name)</div><div class=\"line\">\tC.unsetenv(name)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>确实C绑定的函数调用的程序生效了，可是通过golang调用的程序却不生效了==，最后只有将两个函数柔和在一起才能生效。</p>\n<p>我们并没有深入挖掘这个问题，也并不是非常确定是不是我们使用的姿势不对，这里仅供参考。</p>\n","excerpt":"","more":"<p>这段时间，在公司项目中使用了golang，感觉golang的确有他独到的地方，尤其是<br>goroutine和channel使事情变的简单。可是作为一门新的语言golang仍然会有不少的问题<br>，例如没有检测文件是否存在的函数，没有拷贝文件的函数等等，诸如此类，除了这类问<br>题以外还存在一些与直觉有所不同的问题，此篇博客将会持续记录在使用golang的过程中<br>遇到的一些问题。</p>\n<h2 id=\"没有检测文件是否存在的函数\"><a href=\"#没有检测文件是否存在的函数\" class=\"headerlink\" title=\"没有检测文件是否存在的函数\"></a>没有检测文件是否存在的函数</h2><p>这个问题是我无意中在某项目中看到解决方案时发现的，解决方案也比较简单。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Exist</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span></span> &#123;</div><div class=\"line\">    _, err := os.Stat(path)</div><div class=\"line\">    <span class=\"keyword\">return</span> err == <span class=\"literal\">nil</span> || os.IsExist(err)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"没有拷贝文件的函数\"><a href=\"#没有拷贝文件的函数\" class=\"headerlink\" title=\"没有拷贝文件的函数\"></a>没有拷贝文件的函数</h2><p>关于这一点，在github上有一个<a href=\"https://github.com/daaku/go.copyfile\">项目</a>可以一<br>定程度上的解决这个问题，不过这个项目还有待完善，而且我个人感觉很不习惯。</p>\n<h2 id=\"filepath-Walk\"><a href=\"#filepath-Walk\" class=\"headerlink\" title=\"filepath.Walk\"></a>filepath.Walk</h2><p>这个问题是今天(2014-02-20)遇到的，当我天真的以为对一个不存在的路径进行Walk的时候，此函数什<br>么也不会做，然后像其他函数一样返回错误给我的时候，可结果却是该函数仍然会调用回<br>调函数。后来在文档中发现了这个小秘密，<strong>所有</strong>错误都在回调函数中通过第三个参数处理。我之前还在纳闷回调中的第三个参数有什么用，显然这是我没有仔细阅读文档而相当然的错。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"os\"</span></div><div class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tnotExistedPath := <span class=\"string\">\"/notExistedPath\"</span></div><div class=\"line\">\tfilepath.Walk(</div><div class=\"line\">\t\tnotExistedPath,</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(path <span class=\"keyword\">string</span>, info os.FileInfo, e error)</span> <span class=\"title\">error</span></span> &#123;</div><div class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"invoked\"</span>,</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"\\npath is:\"</span>, path,</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"\\ninfo is:\"</span>, info,</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"\\nerror is:\"</span>, e)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"flag-Bool\"><a href=\"#flag-Bool\" class=\"headerlink\" title=\"flag.Bool\"></a>flag.Bool</h2><p>在吐槽这个之前，先简单的介绍一下命令行参数吧。命令行参数大致分为option（选项）/argument（参数）/command（命令）三种类型。</p>\n<p>option的作用是改变程序的行为，通常具有长和短两种形式，根据选项行为可分为switches(开关)和flags（标志）两类。switches通常用于开启或关闭某项功能，不接受任何参数，而flags则通常需要接受参数。</p>\n<p>argument通常是命令行中除去option的部分，被操作的对象，可能是文件或者目录等等。</p>\n<p>与option和argument不同，command具有更明确的意义，用来管理一些列复杂的行为。使一些比较复杂的程序，例如git，更易于使用和管理。同时，由于command的出现导致option分为了global option和command option。</p>\n<p>关于命令行更详细的介绍《python标准库》中关于命令行模块和《Build Awesome Command-Line Applications in Ruby 2》都是不错的资料。</p>\n<p>言归正传，go语言中flag.Bool是典型的开关型选项。在使用前，当然要写一个小程序来学习一下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"flag\"</span></div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> b <span class=\"keyword\">bool</span></div><div class=\"line\">\tflag.BoolVar(&amp;b, <span class=\"string\">\"b\"</span>, <span class=\"literal\">false</span>, <span class=\"string\">\"description for b\"</span>)</div><div class=\"line\">\tflag.Parse()</div><div class=\"line\">\tfmt.Println(b)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">% go run test.go</div><div class=\"line\"><span class=\"literal\">false</span></div><div class=\"line\">% go run test.go -b</div><div class=\"line\"><span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>这个程序很简单，使用方式也很简单，并且程序的运行结果也正是所期待的结果。我再次天真的以为没问题了。接下来试一下另外一个程序吧。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"flag\"</span></div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> b <span class=\"keyword\">bool</span></div><div class=\"line\">\tflag.BoolVar(&amp;b, <span class=\"string\">\"b\"</span>, <span class=\"literal\">true</span>, <span class=\"string\">\"description for b\"</span>)</div><div class=\"line\">\tflag.Parse()</div><div class=\"line\">\tfmt.Println(b)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">% go run test.go</div><div class=\"line\"><span class=\"literal\">true</span></div><div class=\"line\">% go run test.go -b</div><div class=\"line\"><span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>WTF!!!您这是闹哪样啊，欺负新来的是吧，你还可以再叼一点没关系的。好吧，我承认我又没读文档，因为在文档上找到了这样一句话：</p>\n<blockquote>\n<p>You must use the -flag=false form to turn off a boolean flag.</p>\n</blockquote>\n<p>事实再一次教育我，Please RTFM carefully。只是我实在无法理解这样一种设计是出于何种原因。</p>\n<p>UPDATE：发现一个不错的命令行解析库<a href=\"https://github.com/alecthomas/kingpin\">kingpin</a>。</p>\n<h2 id=\"url\"><a href=\"#url\" class=\"headerlink\" title=\"url\"></a>url</h2><p>前段时间在处理背景图片的时候遇到一个问题，那就是url中空格的问题，空格无法直接使<br>用，需要转换为<code>%20</code>，而在go语言中正好有一个url的包，不过url包略有小坑。<br>在url包中有一个叫<code>url.QueryEscape</code>的全局函数，咋一看这似乎就是所需的函数。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"net/url\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tfmt.Println(url.QueryEscape(<span class=\"string\">\"a b\"</span>))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>得到的结果是：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a+b</div></pre></td></tr></table></figure></p>\n<p>这个必须不是正确的结果。那么在go中到底有没有需要的函数呢？在网上查了老半天，<br>stackoverflow上也有类似的问题，不过却并没有的到解答。处于无奈，只能去看源代码了<br>，还好是开源的。在go的url包的源代码中发现却是存在将空格转换成<code>%20</code>的代码段，仔<br>细看看了，发现<code>String()</code>函数就是寻找的函数。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"net/url\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tfmt.Println(url.Parse(<span class=\"string\">\"a b\"</span>))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果为：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a%20b &lt;nil&gt;</div></pre></td></tr></table></figure></p>\n<p>小结一下：</p>\n<pre>\n|javascript        |golang         |\n|------------------|---------------|\n|encodeURI         |URL.String     |\n|escape            |url.QueryEscape|\n|encodeURIComponent|none           |\n</pre>\n\n<p>也许encodeURIComponent可以通过其他方法组合实现，但是却并没有提供一个单独的函数<br>来。</p>\n<h2 id=\"unsetenv\"><a href=\"#unsetenv\" class=\"headerlink\" title=\"unsetenv\"></a>unsetenv</h2><p>公司同事在写网络代理相关的代码，在设置系统代理时会设值环境变量，在设置和清空环境变量方面golang还是很方便的，只需要使用<code>os.Setenv</code>即可，可是如果需要删除一个环境变量时该怎么办呢？经过我的探索，sorry，在golang中目前并没有unsetenv函数，不过似乎已经有准备在以后的版本中将unsetenv添加到<code>os</code>包中。那么现在要使用unsetenv该怎么办呢？<br>于是同事写了一个UnsetEnv函数：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UnsetEnv</span><span class=\"params\">(envName <span class=\"keyword\">string</span>)</span> <span class=\"params\">(err error)</span></span> &#123;</div><div class=\"line\">\tenvs := os.Environ()</div><div class=\"line\">\tnewEnvsData := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</div><div class=\"line\">\t<span class=\"keyword\">for</span> _, e := <span class=\"keyword\">range</span> envs &#123;</div><div class=\"line\">\t\ta := strings.SplitN(e, <span class=\"string\">\"=\"</span>, <span class=\"number\">2</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> name, value <span class=\"keyword\">string</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(a) == <span class=\"number\">2</span> &#123;</div><div class=\"line\">\t\t\tname = a[<span class=\"number\">0</span>]</div><div class=\"line\">\t\t\tvalue = a[<span class=\"number\">1</span>]</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tname = a[<span class=\"number\">0</span>]</div><div class=\"line\">\t\t\tvalue = <span class=\"string\">\"\"</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> name != envName &#123;</div><div class=\"line\">\t\t\tnewEnvsData[name] = value</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tos.Clearenv()</div><div class=\"line\">\t<span class=\"keyword\">for</span> e, v := <span class=\"keyword\">range</span> newEnvsData &#123;</div><div class=\"line\">\t\terr = os.Setenv(e, v)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个函数在某些程序中确实可以正确的运行，可是在测试过程中我们发现这个函数对通过C绑定的gio函数调用的程序并没有生效，于是就想到使用C中的<code>unsetenv</code>函数，便有了以下的函数：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UnsetEnv</span><span class=\"params\">(_name <span class=\"keyword\">string</span>)</span></span> &#123;</div><div class=\"line\">\tname := C.CString(_name)</div><div class=\"line\">\t<span class=\"keyword\">defer</span> C.free(name)</div><div class=\"line\">\tC.unsetenv(name)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>确实C绑定的函数调用的程序生效了，可是通过golang调用的程序却不生效了==，最后只有将两个函数柔和在一起才能生效。</p>\n<p>我们并没有深入挖掘这个问题，也并不是非常确定是不是我们使用的姿势不对，这里仅供参考。</p>\n"},{"layout":"post","title":"Fix Newline to Space","description":"jekyll converts newline to space, it's not good for chinese.","modified":"2014-02-21T16:00:00.000Z","image":{"feature":"abstract-2.jpg"},"comments":1,"share":true,"_content":"\n更新：由于jekyll的更新，post\\_filter已经被移除，因此修改方式已经无效。\n\n之前，[RandomK](http://randomk.gitcafe.com/)说我的blog有bug，其实在他说之前我就已经知道了，只是当时比较晚，所以没有修，今天周末将其解决之。\n\n## 原因\n\n我使用的是redcarpet作为markdown的转换器，jekyll将多行的段落转换成html之后在浏览\n器中显示会很奇怪，在原始的markdown中的某一行最后一个字与下一行的第一个字之间存\n在一个空格，作为使用单词的外国淫来说没什么问题，可是作为大天朝子民是无法忍受的。\n<figure>\n<a href=\"{{ site.url }}/images/fix-space/space.png\" class='fancybox'>\n<img data-echo=\"{{ site.url }}/images/fix-space/space.png\" alt=\"space\" title=\"space\">\n</a>\n<figcaption>文字之间存在空格</figcaption>\n</figure>\n\n\n## 解决方案一 段落写为一行\n\n我只能说这种行为好痛苦。\n\n\n## 解决方案二 在markdown转换为html前处理一下\n\n由于无法忍受第一种解决方案，只能在markdown转换为html之前进行一些预处理了。在网\n上搜索一番后发现果然不止我一人遇到此问题，并且找到了一个[解决方案][solution]。\n不过该解决方案有一定的局限性，第一，没有处理汉英和英汉这两种情况，第二，没有处\n理摘要。\n\n为了解决以上两个问题，必须做出一些更改。\n\n首先，作为一个非octopress用户，果断得去github上将octopress的[post\\_filters plugins][post_filters]得到，\n然后，从[解决 Markdown 转 HTML 中文换行变空格的问题][solution]将代码拷贝并保存\n到存放plugins的目录。然后就可以开始修改了。\n\n修改1:\n\n```ruby\nclass String\n  han = '\\p{Han}|[，。？；：‘’“”、！……（）]'\n  @@hh = /(#{han}) *\\n *(#{han})/m\n  @@he = /(#{han}) *\\n *(\\p{Alpha})/m\n  @@eh = /(\\p{Alpha}) *\\n *(#{han})/m\n  def join_chinese!\n    gsub!(@@hh, '\\1\\2')\n    gsub!(@@he, '\\1\\2')\n    gsub!(@@eh, '\\1\\2')\n    self\n  end\nend\n```\n\n经过修改后，blog就能够正常显示了。\n<figure class=\"half\">\n<a href=\"{{ site.url }}/images/fix-space/space.png\" class='fancybox'>\n<img data-echo=\"{{ site.url }}/images/fix-space/space.png\" alt=\"space\" title=\"space\">\n</a>\n<a href=\"{{ site.url }}/images/fix-space/no-space.png\" class='fancybox'>\n<img data-echo=\"{{ site.url }}/images/fix-space/no-space.png\" alt=\"no-space\" title=\"no space\">\n</a>\n    <figcaption>第一阶段成果</figcaption>\n</figure>\n\n修改2:\n虽然blog中的问题解决了，但是摘要部分并没有的到解决。\n<figure>\n<a href=\"{{ site.url }}/images/fix-space/wrong-excerpt.png\" class='fancybox'>\n<img data-echo=\"{{ site.url }}/images/fix-space/wrong-excerpt.png\" alt=\"wrong-excerpt\" title=\"wrong-excerpt\">\n</a>\n    <figcaption>摘要中显示错误</figcaption>\n</figure>\n由于在pre\\_render中添加`{%raw%}post.excerpt.join_chinese!{%endraw%}`会导致jekyll创建html时失败，\n因此采用添加一个filter供Liquid使用，从而解决解决此问题。\n\n将一下代码加入Jekyll模块中\n\n```ruby\n  module TemplateJoinChineseFilter\n    def join_chinese(input)\n      input.join_chinese!\n    end\n  end\n```\n然后将`Liquid::Template.register_filter(Jekyll::TemplateJoinChineseFilter)`添加到最后一行。\n最后，只需要在使用摘要的时候使用`{%raw%}{{ page.excerpt | join_chinese }}{% endraw %}`替代`{% raw %}{{ page.excerpt }}{% endraw %}`即可。\n<figure class='half'>\n<a href=\"{{ site.url }}/images/fix-space/wrong-excerpt.png\" class='fancybox'>\n<img data-echo=\"{{ site.url }}/images/fix-space/wrong-excerpt.png\" alt=\"wrong-excerpt\" title=\"wrong-excerpt\">\n</a>\n<a href=\"{{ site.url }}/images/fix-space/excerpt.png\" class='fancybox'>\n<img data-echo=\"{{ site.url }}/images/fix-space/excerpt.png\" alt=\"excerpt\" title=\"excerpt\">\n</a>\n<figcaption>摘要中空格也不存在了</figcaption>\n</figure>\n\n\n# The End\n\n问题基本得到了解决，不过还有几点需要注意：\n\n1. markdown中标题与正文之间需要一行空白行（我不习惯）。\n2. 标点符号和数字没有处理，因此有些地方是不适合换行然后通过插件解决的。\n3. 应该还存在这一些bug。\n\n\n## Reference\n\n1. [解决 Markdown 转 HTML 中文换行变空格的问题][solution]。\n2. [post\\_filter][post_filters]。\n\n\n[solution]: http://chenyufei.info/blog/2011-12-23/fix-chinese-newline-becomes-space-in-browser-problem/\n[post_filters]: https://github.com/imathis/octopress/blob/master/plugins/post_filters.rb\n","source":"_posts/2014-02-23-fix-newline-to-space.md","raw":"---\nlayout: post\ntitle: Fix Newline to Space\ndescription: \"jekyll converts newline to space, it's not good for chinese.\"\nmodified: 2014-02-22\ntags: [jekyll]\nimage:\n  feature: abstract-2.jpg\ncomments: true\nshare: true\n---\n\n更新：由于jekyll的更新，post\\_filter已经被移除，因此修改方式已经无效。\n\n之前，[RandomK](http://randomk.gitcafe.com/)说我的blog有bug，其实在他说之前我就已经知道了，只是当时比较晚，所以没有修，今天周末将其解决之。\n\n## 原因\n\n我使用的是redcarpet作为markdown的转换器，jekyll将多行的段落转换成html之后在浏览\n器中显示会很奇怪，在原始的markdown中的某一行最后一个字与下一行的第一个字之间存\n在一个空格，作为使用单词的外国淫来说没什么问题，可是作为大天朝子民是无法忍受的。\n<figure>\n<a href=\"{{ site.url }}/images/fix-space/space.png\" class='fancybox'>\n<img data-echo=\"{{ site.url }}/images/fix-space/space.png\" alt=\"space\" title=\"space\">\n</a>\n<figcaption>文字之间存在空格</figcaption>\n</figure>\n\n\n## 解决方案一 段落写为一行\n\n我只能说这种行为好痛苦。\n\n\n## 解决方案二 在markdown转换为html前处理一下\n\n由于无法忍受第一种解决方案，只能在markdown转换为html之前进行一些预处理了。在网\n上搜索一番后发现果然不止我一人遇到此问题，并且找到了一个[解决方案][solution]。\n不过该解决方案有一定的局限性，第一，没有处理汉英和英汉这两种情况，第二，没有处\n理摘要。\n\n为了解决以上两个问题，必须做出一些更改。\n\n首先，作为一个非octopress用户，果断得去github上将octopress的[post\\_filters plugins][post_filters]得到，\n然后，从[解决 Markdown 转 HTML 中文换行变空格的问题][solution]将代码拷贝并保存\n到存放plugins的目录。然后就可以开始修改了。\n\n修改1:\n\n```ruby\nclass String\n  han = '\\p{Han}|[，。？；：‘’“”、！……（）]'\n  @@hh = /(#{han}) *\\n *(#{han})/m\n  @@he = /(#{han}) *\\n *(\\p{Alpha})/m\n  @@eh = /(\\p{Alpha}) *\\n *(#{han})/m\n  def join_chinese!\n    gsub!(@@hh, '\\1\\2')\n    gsub!(@@he, '\\1\\2')\n    gsub!(@@eh, '\\1\\2')\n    self\n  end\nend\n```\n\n经过修改后，blog就能够正常显示了。\n<figure class=\"half\">\n<a href=\"{{ site.url }}/images/fix-space/space.png\" class='fancybox'>\n<img data-echo=\"{{ site.url }}/images/fix-space/space.png\" alt=\"space\" title=\"space\">\n</a>\n<a href=\"{{ site.url }}/images/fix-space/no-space.png\" class='fancybox'>\n<img data-echo=\"{{ site.url }}/images/fix-space/no-space.png\" alt=\"no-space\" title=\"no space\">\n</a>\n    <figcaption>第一阶段成果</figcaption>\n</figure>\n\n修改2:\n虽然blog中的问题解决了，但是摘要部分并没有的到解决。\n<figure>\n<a href=\"{{ site.url }}/images/fix-space/wrong-excerpt.png\" class='fancybox'>\n<img data-echo=\"{{ site.url }}/images/fix-space/wrong-excerpt.png\" alt=\"wrong-excerpt\" title=\"wrong-excerpt\">\n</a>\n    <figcaption>摘要中显示错误</figcaption>\n</figure>\n由于在pre\\_render中添加`{%raw%}post.excerpt.join_chinese!{%endraw%}`会导致jekyll创建html时失败，\n因此采用添加一个filter供Liquid使用，从而解决解决此问题。\n\n将一下代码加入Jekyll模块中\n\n```ruby\n  module TemplateJoinChineseFilter\n    def join_chinese(input)\n      input.join_chinese!\n    end\n  end\n```\n然后将`Liquid::Template.register_filter(Jekyll::TemplateJoinChineseFilter)`添加到最后一行。\n最后，只需要在使用摘要的时候使用`{%raw%}{{ page.excerpt | join_chinese }}{% endraw %}`替代`{% raw %}{{ page.excerpt }}{% endraw %}`即可。\n<figure class='half'>\n<a href=\"{{ site.url }}/images/fix-space/wrong-excerpt.png\" class='fancybox'>\n<img data-echo=\"{{ site.url }}/images/fix-space/wrong-excerpt.png\" alt=\"wrong-excerpt\" title=\"wrong-excerpt\">\n</a>\n<a href=\"{{ site.url }}/images/fix-space/excerpt.png\" class='fancybox'>\n<img data-echo=\"{{ site.url }}/images/fix-space/excerpt.png\" alt=\"excerpt\" title=\"excerpt\">\n</a>\n<figcaption>摘要中空格也不存在了</figcaption>\n</figure>\n\n\n# The End\n\n问题基本得到了解决，不过还有几点需要注意：\n\n1. markdown中标题与正文之间需要一行空白行（我不习惯）。\n2. 标点符号和数字没有处理，因此有些地方是不适合换行然后通过插件解决的。\n3. 应该还存在这一些bug。\n\n\n## Reference\n\n1. [解决 Markdown 转 HTML 中文换行变空格的问题][solution]。\n2. [post\\_filter][post_filters]。\n\n\n[solution]: http://chenyufei.info/blog/2011-12-23/fix-chinese-newline-becomes-space-in-browser-problem/\n[post_filters]: https://github.com/imathis/octopress/blob/master/plugins/post_filters.rb\n","slug":"2014-02-23-fix-newline-to-space","published":1,"date":"2016-12-27T12:40:26.276Z","updated":"2016-12-27T12:40:26.276Z","photos":[],"link":"","_id":"cix7i6arb0001271juqhcc7ce","content":"<p>更新：由于jekyll的更新，post_filter已经被移除，因此修改方式已经无效。</p>\n<p>之前，<a href=\"http://randomk.gitcafe.com/\" target=\"_blank\" rel=\"external\">RandomK</a>说我的blog有bug，其实在他说之前我就已经知道了，只是当时比较晚，所以没有修，今天周末将其解决之。</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>我使用的是redcarpet作为markdown的转换器，jekyll将多行的段落转换成html之后在浏览<br>器中显示会很奇怪，在原始的markdown中的某一行最后一个字与下一行的第一个字之间存<br>在一个空格，作为使用单词的外国淫来说没什么问题，可是作为大天朝子民是无法忍受的。</p>\n<figure><br><a href=\"/images/fix-space/space.png\" class=\"fancybox\"><br><img data-echo=\"/images/fix-space/space.png\" alt=\"space\" title=\"space\"><br></a><br><figcaption>文字之间存在空格</figcaption><br></figure>\n\n\n<h2 id=\"解决方案一-段落写为一行\"><a href=\"#解决方案一-段落写为一行\" class=\"headerlink\" title=\"解决方案一 段落写为一行\"></a>解决方案一 段落写为一行</h2><p>我只能说这种行为好痛苦。</p>\n<h2 id=\"解决方案二-在markdown转换为html前处理一下\"><a href=\"#解决方案二-在markdown转换为html前处理一下\" class=\"headerlink\" title=\"解决方案二 在markdown转换为html前处理一下\"></a>解决方案二 在markdown转换为html前处理一下</h2><p>由于无法忍受第一种解决方案，只能在markdown转换为html之前进行一些预处理了。在网<br>上搜索一番后发现果然不止我一人遇到此问题，并且找到了一个<a href=\"http://chenyufei.info/blog/2011-12-23/fix-chinese-newline-becomes-space-in-browser-problem/\" target=\"_blank\" rel=\"external\">解决方案</a>。<br>不过该解决方案有一定的局限性，第一，没有处理汉英和英汉这两种情况，第二，没有处<br>理摘要。</p>\n<p>为了解决以上两个问题，必须做出一些更改。</p>\n<p>首先，作为一个非octopress用户，果断得去github上将octopress的<a href=\"https://github.com/imathis/octopress/blob/master/plugins/post_filters.rb\" target=\"_blank\" rel=\"external\">post_filters plugins</a>得到，<br>然后，从<a href=\"http://chenyufei.info/blog/2011-12-23/fix-chinese-newline-becomes-space-in-browser-problem/\" target=\"_blank\" rel=\"external\">解决 Markdown 转 HTML 中文换行变空格的问题</a>将代码拷贝并保存<br>到存放plugins的目录。然后就可以开始修改了。</p>\n<p>修改1:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">String</span></span></div><div class=\"line\">  han = <span class=\"string\">'\\p&#123;Han&#125;|[，。？；：‘’“”、！……（）]'</span></div><div class=\"line\">  @@hh = <span class=\"regexp\">/(<span class=\"subst\">#&#123;han&#125;</span>) *\\n *(<span class=\"subst\">#&#123;han&#125;</span>)/m</span></div><div class=\"line\">  @@he = <span class=\"regexp\">/(<span class=\"subst\">#&#123;han&#125;</span>) *\\n *(\\p&#123;Alpha&#125;)/m</span></div><div class=\"line\">  @@eh = <span class=\"regexp\">/(\\p&#123;Alpha&#125;) *\\n *(<span class=\"subst\">#&#123;han&#125;</span>)/m</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">join_chinese!</span></span></div><div class=\"line\">    gsub!(@@hh, <span class=\"string\">'\\1\\2'</span>)</div><div class=\"line\">    gsub!(@@he, <span class=\"string\">'\\1\\2'</span>)</div><div class=\"line\">    gsub!(@@eh, <span class=\"string\">'\\1\\2'</span>)</div><div class=\"line\">    <span class=\"keyword\">self</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>经过修改后，blog就能够正常显示了。</p>\n<figure class=\"half\"><br><a href=\"/images/fix-space/space.png\" class=\"fancybox\"><br><img data-echo=\"/images/fix-space/space.png\" alt=\"space\" title=\"space\"><br></a><br><a href=\"/images/fix-space/no-space.png\" class=\"fancybox\"><br><img data-echo=\"/images/fix-space/no-space.png\" alt=\"no-space\" title=\"no space\"><br></a><br>    <figcaption>第一阶段成果</figcaption><br></figure>\n\n<p>修改2:<br>虽然blog中的问题解决了，但是摘要部分并没有的到解决。</p>\n<figure><br><a href=\"/images/fix-space/wrong-excerpt.png\" class=\"fancybox\"><br><img data-echo=\"/images/fix-space/wrong-excerpt.png\" alt=\"wrong-excerpt\" title=\"wrong-excerpt\"><br></a><br>    <figcaption>摘要中显示错误</figcaption><br></figure><br>由于在pre_render中添加<code>post.excerpt.join_chinese!</code>会导致jekyll创建html时失败，<br>因此采用添加一个filter供Liquid使用，从而解决解决此问题。<br><br>将一下代码加入Jekyll模块中<br><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">TemplateJoinChineseFilter</span></span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">join_chinese</span><span class=\"params\">(input)</span></span></div><div class=\"line\">    input.join_chinese!</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure><br><br>然后将<code>Liquid::Template.register_filter(Jekyll::TemplateJoinChineseFilter)</code>添加到最后一行。<br>最后，只需要在使用摘要的时候使用<code>{{ page.excerpt | join_chinese }}</code>替代<code>{{ page.excerpt }}</code>即可。<br><figure class=\"half\"><br><a href=\"/images/fix-space/wrong-excerpt.png\" class=\"fancybox\"><br><img data-echo=\"/images/fix-space/wrong-excerpt.png\" alt=\"wrong-excerpt\" title=\"wrong-excerpt\"><br></a><br><a href=\"/images/fix-space/excerpt.png\" class=\"fancybox\"><br><img data-echo=\"/images/fix-space/excerpt.png\" alt=\"excerpt\" title=\"excerpt\"><br></a><br><figcaption>摘要中空格也不存在了</figcaption><br></figure>\n\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The End\"></a>The End</h1><p>问题基本得到了解决，不过还有几点需要注意：</p>\n<ol>\n<li>markdown中标题与正文之间需要一行空白行（我不习惯）。</li>\n<li>标点符号和数字没有处理，因此有些地方是不适合换行然后通过插件解决的。</li>\n<li>应该还存在这一些bug。</li>\n</ol>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"http://chenyufei.info/blog/2011-12-23/fix-chinese-newline-becomes-space-in-browser-problem/\" target=\"_blank\" rel=\"external\">解决 Markdown 转 HTML 中文换行变空格的问题</a>。</li>\n<li><a href=\"https://github.com/imathis/octopress/blob/master/plugins/post_filters.rb\" target=\"_blank\" rel=\"external\">post_filter</a>。</li>\n</ol>\n","excerpt":"","more":"<p>更新：由于jekyll的更新，post_filter已经被移除，因此修改方式已经无效。</p>\n<p>之前，<a href=\"http://randomk.gitcafe.com/\">RandomK</a>说我的blog有bug，其实在他说之前我就已经知道了，只是当时比较晚，所以没有修，今天周末将其解决之。</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>我使用的是redcarpet作为markdown的转换器，jekyll将多行的段落转换成html之后在浏览<br>器中显示会很奇怪，在原始的markdown中的某一行最后一个字与下一行的第一个字之间存<br>在一个空格，作为使用单词的外国淫来说没什么问题，可是作为大天朝子民是无法忍受的。</p>\n<figure><br><a href=\"/images/fix-space/space.png\" class='fancybox'><br><img data-echo=\"/images/fix-space/space.png\" alt=\"space\" title=\"space\"><br></a><br><figcaption>文字之间存在空格</figcaption><br></figure>\n\n\n<h2 id=\"解决方案一-段落写为一行\"><a href=\"#解决方案一-段落写为一行\" class=\"headerlink\" title=\"解决方案一 段落写为一行\"></a>解决方案一 段落写为一行</h2><p>我只能说这种行为好痛苦。</p>\n<h2 id=\"解决方案二-在markdown转换为html前处理一下\"><a href=\"#解决方案二-在markdown转换为html前处理一下\" class=\"headerlink\" title=\"解决方案二 在markdown转换为html前处理一下\"></a>解决方案二 在markdown转换为html前处理一下</h2><p>由于无法忍受第一种解决方案，只能在markdown转换为html之前进行一些预处理了。在网<br>上搜索一番后发现果然不止我一人遇到此问题，并且找到了一个<a href=\"http://chenyufei.info/blog/2011-12-23/fix-chinese-newline-becomes-space-in-browser-problem/\">解决方案</a>。<br>不过该解决方案有一定的局限性，第一，没有处理汉英和英汉这两种情况，第二，没有处<br>理摘要。</p>\n<p>为了解决以上两个问题，必须做出一些更改。</p>\n<p>首先，作为一个非octopress用户，果断得去github上将octopress的<a href=\"https://github.com/imathis/octopress/blob/master/plugins/post_filters.rb\">post_filters plugins</a>得到，<br>然后，从<a href=\"http://chenyufei.info/blog/2011-12-23/fix-chinese-newline-becomes-space-in-browser-problem/\">解决 Markdown 转 HTML 中文换行变空格的问题</a>将代码拷贝并保存<br>到存放plugins的目录。然后就可以开始修改了。</p>\n<p>修改1:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">String</span></span></div><div class=\"line\">  han = <span class=\"string\">'\\p&#123;Han&#125;|[，。？；：‘’“”、！……（）]'</span></div><div class=\"line\">  @@hh = <span class=\"regexp\">/(<span class=\"subst\">#&#123;han&#125;</span>) *\\n *(<span class=\"subst\">#&#123;han&#125;</span>)/m</span></div><div class=\"line\">  @@he = <span class=\"regexp\">/(<span class=\"subst\">#&#123;han&#125;</span>) *\\n *(\\p&#123;Alpha&#125;)/m</span></div><div class=\"line\">  @@eh = <span class=\"regexp\">/(\\p&#123;Alpha&#125;) *\\n *(<span class=\"subst\">#&#123;han&#125;</span>)/m</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">join_chinese!</span></span></div><div class=\"line\">    gsub!(@@hh, <span class=\"string\">'\\1\\2'</span>)</div><div class=\"line\">    gsub!(@@he, <span class=\"string\">'\\1\\2'</span>)</div><div class=\"line\">    gsub!(@@eh, <span class=\"string\">'\\1\\2'</span>)</div><div class=\"line\">    <span class=\"keyword\">self</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>经过修改后，blog就能够正常显示了。</p>\n<figure class=\"half\"><br><a href=\"/images/fix-space/space.png\" class='fancybox'><br><img data-echo=\"/images/fix-space/space.png\" alt=\"space\" title=\"space\"><br></a><br><a href=\"/images/fix-space/no-space.png\" class='fancybox'><br><img data-echo=\"/images/fix-space/no-space.png\" alt=\"no-space\" title=\"no space\"><br></a><br>    <figcaption>第一阶段成果</figcaption><br></figure>\n\n<p>修改2:<br>虽然blog中的问题解决了，但是摘要部分并没有的到解决。</p>\n<figure><br><a href=\"/images/fix-space/wrong-excerpt.png\" class='fancybox'><br><img data-echo=\"/images/fix-space/wrong-excerpt.png\" alt=\"wrong-excerpt\" title=\"wrong-excerpt\"><br></a><br>    <figcaption>摘要中显示错误</figcaption><br></figure><br>由于在pre_render中添加<code>post.excerpt.join_chinese!</code>会导致jekyll创建html时失败，<br>因此采用添加一个filter供Liquid使用，从而解决解决此问题。<br><br>将一下代码加入Jekyll模块中<br><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">TemplateJoinChineseFilter</span></span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">join_chinese</span><span class=\"params\">(input)</span></span></div><div class=\"line\">    input.join_chinese!</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure><br><br>然后将<code>Liquid::Template.register_filter(Jekyll::TemplateJoinChineseFilter)</code>添加到最后一行。<br>最后，只需要在使用摘要的时候使用<code>{{ page.excerpt | join_chinese }}</code>替代<code>{{ page.excerpt }}</code>即可。<br><figure class='half'><br><a href=\"/images/fix-space/wrong-excerpt.png\" class='fancybox'><br><img data-echo=\"/images/fix-space/wrong-excerpt.png\" alt=\"wrong-excerpt\" title=\"wrong-excerpt\"><br></a><br><a href=\"/images/fix-space/excerpt.png\" class='fancybox'><br><img data-echo=\"/images/fix-space/excerpt.png\" alt=\"excerpt\" title=\"excerpt\"><br></a><br><figcaption>摘要中空格也不存在了</figcaption><br></figure>\n\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The End\"></a>The End</h1><p>问题基本得到了解决，不过还有几点需要注意：</p>\n<ol>\n<li>markdown中标题与正文之间需要一行空白行（我不习惯）。</li>\n<li>标点符号和数字没有处理，因此有些地方是不适合换行然后通过插件解决的。</li>\n<li>应该还存在这一些bug。</li>\n</ol>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"http://chenyufei.info/blog/2011-12-23/fix-chinese-newline-becomes-space-in-browser-problem/\">解决 Markdown 转 HTML 中文换行变空格的问题</a>。</li>\n<li><a href=\"https://github.com/imathis/octopress/blob/master/plugins/post_filters.rb\">post_filter</a>。</li>\n</ol>\n"},{"layout":"post","title":"Bit Getter and Setter","description":"a simple bit getter and setter","modified":"2014-03-08T16:00:00.000Z","image":{"feature":"abstract-6.jpg"},"comments":1,"share":true,"_content":"\n昨天周六，下午把床晒了晒，在晒床的时候呢，我则躺在沙发上看了看《算法精解》，正好看到位运算。里面有两个简单的操作，\n一个是对某一位设1/0，另一个则是获取某一位是1/0。当时的直觉是，代码写的简单直白，应该还有更高效的处理方法。\n\n虽然这个想法仅仅是在脑海中一闪而过，但是晚上正好在C++吧看到[一篇帖子](http://tieba.baidu.com/p/2900558125)，\n楼主提出了类似的写法，并称该算法效率太差，希望高手指教。\n\n进去看了看，首先看到的是楼主说即使将mask存入数组，可还是太慢。另外有人给出了一段简单的代码片段，楼主根据这个代码片段写了一个简单的宏：\n\n~~~c\n#define SetBit(LPByte,BitPlace,BitValue) ( BitValue==0? (*LPByte)&=~(1<<(BitPlace-1)) : (*LPByte)|=(1<<(BitPlace-1)));\n~~~\n\n代码很简单，首先判断要设的值是1还是0，然后根据这个值来对1进行位移等位操作然后根据不同的值使用其他位操作来对特定的位设值。\n不过根据评论，似乎对性能没有多大的影响。看到这段代码的感觉是，应该可以不用判断BitValue的值，而是对BitValue进行某些位操作来得到某个值，\n之后使用这个值与LPByte进行一定位操作之后的结果进行某个位操作之后即可得到正确的值。果然，楼主在楼下提出了另一段代码，实现了我所想的方案：\n\n~~~c\n#define SetBit(LPByte,BitPlace,BitValue) ( (*LPByte) = ( (*LPByte)&~(1<<(BitPlace-1) ))|(BitValue<<(BitPlace-1)) );\n\n#define GetBit(LPByte,BitPlace,BitValue) ( BitValue=((*LPByte)&(1<<(BitPlace-1)))>>(BitPlace-1) );\n~~~\n\n宏看起来都比较麻烦，而且这段宏还存在着一定的问题，为了方便我将其整理成为了一下代码：\n\n~~~ c\nunsigned char set_bit(unsigned char b, int pos, int value)\n{\n    return (b & ~(1 << (pos - 1))) | (value << (pos - 1));\n}\n\nint get_bit(unsigned char b, int pos)\n{\n    return (b & (1 << (pos - 1))) >> (pos - 1);\n}\n~~~\n\n这段宏改编的代码很简单，而且所采用的思想其实也很简单，对于set\\_bit函数来说，首先通过对1的位移和取反，然后与b进行与操作将该位置为0，\n然后对value进行位移，之后再与之前清空后的结果进行或操作得到最后的结果。类似的，get\\_bit函数则是与set\\_bit函数相反，将其他位置位0而保留需要获取的位，\n之后将其位移得到最后的结果。后来楼主又贴出了另外一段对n位进行处理的代码：\n\n~~~c\n#define GetNBit (LPByte,Begin,End,BitValue) (BitValue=((*LPByte)&((255>>(8-End))&(255<<(Begin-1))))>>(Begin-1));\n\n#define SetNBit (LPByte,Begin,End,BitValue) (*LPByte)=((*LPByte)&(~((255>>(8-End))&(255<<(Begin-1)))))|(BitValue<<(Begin-1));\n~~~\n\n这段代码就不改写了，原理和之前的是一样的。当然，还有人提到了内联汇编，使用BT/BTS之类的命令，不过我觉得已经没有必要了。\n虽然我不是很懂汇编，也没有测试，不过我对使用这些带有测试的操作能够比直接通过简单的位操作来得到结果更快持怀疑态度，\n过段时间我想我会测试一下。\n\n不过既然提到了汇编，而主题又是位移什么的，不禁让我想起了以前看《深入理解计算机系统》的日子，情不自禁的将代码生成汇编代码观察了一番，\n代码比较简单，没什么值得多说的，值得一提的是参数和本地变量是通过ebp寄存器做偏移得到的，eax寄存器则被频繁用于存储结果，并在最后用来\n存储函数的返回值。而楼主以前使用switch很慢的原因，根据幻之上帝的说法是：要分支预测+间接操作慢个几十倍正常。\n\n回头想一下，其实这些操作与思想都是很基础的，尤其是将对某一位进行保留和置1/0这几个操作可以说是基础中的基础。再次提醒自己，\n不论做什么事情，基础都是最重要的，不要只看到别人的光鲜亮丽，要静下心来学习，打好基础，只有基础好了，才能够从基础中演变出各种犀利的东西。\n\n\n参考资料（关于汇编的）：\n\n1. [x86 Assembly Guide](https://www.cs.virginia.edu/~evans/cs216/guides/x86.html)\n2. [IA-32 Assembly for Compiler Writers](https://www.cse.nd.edu/~dthain/courses/cse40243/fall2008/ia32-intro.html)\n3. [A Readers Guide to x86 Assembly(pdf)](https://cseweb.ucsd.edu/classes/sp10/cse141/pdf/02/S01_x86_64.key.pdf)\n4. [分析.cpp文件编译生成的汇编文件里语句的作用](http://www.cnblogs.com/justinyo/archive/2013/03/08/2950718.html)","source":"_posts/2014-03-09-bit-getter-and-setter.md","raw":"---\nlayout: post\ntitle: Bit Getter and Setter\ndescription: \"a simple bit getter and setter\"\nmodified: 2014-03-09\ntags: [c, cpp, c++, bit-operation]\nimage:\n  feature: abstract-6.jpg\ncomments: true\nshare: true\n---\n\n昨天周六，下午把床晒了晒，在晒床的时候呢，我则躺在沙发上看了看《算法精解》，正好看到位运算。里面有两个简单的操作，\n一个是对某一位设1/0，另一个则是获取某一位是1/0。当时的直觉是，代码写的简单直白，应该还有更高效的处理方法。\n\n虽然这个想法仅仅是在脑海中一闪而过，但是晚上正好在C++吧看到[一篇帖子](http://tieba.baidu.com/p/2900558125)，\n楼主提出了类似的写法，并称该算法效率太差，希望高手指教。\n\n进去看了看，首先看到的是楼主说即使将mask存入数组，可还是太慢。另外有人给出了一段简单的代码片段，楼主根据这个代码片段写了一个简单的宏：\n\n~~~c\n#define SetBit(LPByte,BitPlace,BitValue) ( BitValue==0? (*LPByte)&=~(1<<(BitPlace-1)) : (*LPByte)|=(1<<(BitPlace-1)));\n~~~\n\n代码很简单，首先判断要设的值是1还是0，然后根据这个值来对1进行位移等位操作然后根据不同的值使用其他位操作来对特定的位设值。\n不过根据评论，似乎对性能没有多大的影响。看到这段代码的感觉是，应该可以不用判断BitValue的值，而是对BitValue进行某些位操作来得到某个值，\n之后使用这个值与LPByte进行一定位操作之后的结果进行某个位操作之后即可得到正确的值。果然，楼主在楼下提出了另一段代码，实现了我所想的方案：\n\n~~~c\n#define SetBit(LPByte,BitPlace,BitValue) ( (*LPByte) = ( (*LPByte)&~(1<<(BitPlace-1) ))|(BitValue<<(BitPlace-1)) );\n\n#define GetBit(LPByte,BitPlace,BitValue) ( BitValue=((*LPByte)&(1<<(BitPlace-1)))>>(BitPlace-1) );\n~~~\n\n宏看起来都比较麻烦，而且这段宏还存在着一定的问题，为了方便我将其整理成为了一下代码：\n\n~~~ c\nunsigned char set_bit(unsigned char b, int pos, int value)\n{\n    return (b & ~(1 << (pos - 1))) | (value << (pos - 1));\n}\n\nint get_bit(unsigned char b, int pos)\n{\n    return (b & (1 << (pos - 1))) >> (pos - 1);\n}\n~~~\n\n这段宏改编的代码很简单，而且所采用的思想其实也很简单，对于set\\_bit函数来说，首先通过对1的位移和取反，然后与b进行与操作将该位置为0，\n然后对value进行位移，之后再与之前清空后的结果进行或操作得到最后的结果。类似的，get\\_bit函数则是与set\\_bit函数相反，将其他位置位0而保留需要获取的位，\n之后将其位移得到最后的结果。后来楼主又贴出了另外一段对n位进行处理的代码：\n\n~~~c\n#define GetNBit (LPByte,Begin,End,BitValue) (BitValue=((*LPByte)&((255>>(8-End))&(255<<(Begin-1))))>>(Begin-1));\n\n#define SetNBit (LPByte,Begin,End,BitValue) (*LPByte)=((*LPByte)&(~((255>>(8-End))&(255<<(Begin-1)))))|(BitValue<<(Begin-1));\n~~~\n\n这段代码就不改写了，原理和之前的是一样的。当然，还有人提到了内联汇编，使用BT/BTS之类的命令，不过我觉得已经没有必要了。\n虽然我不是很懂汇编，也没有测试，不过我对使用这些带有测试的操作能够比直接通过简单的位操作来得到结果更快持怀疑态度，\n过段时间我想我会测试一下。\n\n不过既然提到了汇编，而主题又是位移什么的，不禁让我想起了以前看《深入理解计算机系统》的日子，情不自禁的将代码生成汇编代码观察了一番，\n代码比较简单，没什么值得多说的，值得一提的是参数和本地变量是通过ebp寄存器做偏移得到的，eax寄存器则被频繁用于存储结果，并在最后用来\n存储函数的返回值。而楼主以前使用switch很慢的原因，根据幻之上帝的说法是：要分支预测+间接操作慢个几十倍正常。\n\n回头想一下，其实这些操作与思想都是很基础的，尤其是将对某一位进行保留和置1/0这几个操作可以说是基础中的基础。再次提醒自己，\n不论做什么事情，基础都是最重要的，不要只看到别人的光鲜亮丽，要静下心来学习，打好基础，只有基础好了，才能够从基础中演变出各种犀利的东西。\n\n\n参考资料（关于汇编的）：\n\n1. [x86 Assembly Guide](https://www.cs.virginia.edu/~evans/cs216/guides/x86.html)\n2. [IA-32 Assembly for Compiler Writers](https://www.cse.nd.edu/~dthain/courses/cse40243/fall2008/ia32-intro.html)\n3. [A Readers Guide to x86 Assembly(pdf)](https://cseweb.ucsd.edu/classes/sp10/cse141/pdf/02/S01_x86_64.key.pdf)\n4. [分析.cpp文件编译生成的汇编文件里语句的作用](http://www.cnblogs.com/justinyo/archive/2013/03/08/2950718.html)","slug":"2014-03-09-bit-getter-and-setter","published":1,"date":"2016-12-27T12:40:26.276Z","updated":"2016-12-27T12:40:26.276Z","photos":[],"link":"","_id":"cix7i6ari0003271jzsqf3dwr","content":"<p>昨天周六，下午把床晒了晒，在晒床的时候呢，我则躺在沙发上看了看《算法精解》，正好看到位运算。里面有两个简单的操作，<br>一个是对某一位设1/0，另一个则是获取某一位是1/0。当时的直觉是，代码写的简单直白，应该还有更高效的处理方法。</p>\n<p>虽然这个想法仅仅是在脑海中一闪而过，但是晚上正好在C++吧看到<a href=\"http://tieba.baidu.com/p/2900558125\" target=\"_blank\" rel=\"external\">一篇帖子</a>，<br>楼主提出了类似的写法，并称该算法效率太差，希望高手指教。</p>\n<p>进去看了看，首先看到的是楼主说即使将mask存入数组，可还是太慢。另外有人给出了一段简单的代码片段，楼主根据这个代码片段写了一个简单的宏：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SetBit(LPByte,BitPlace,BitValue) ( BitValue==0? (*LPByte)&amp;=~(1<span class=\"meta-string\">&lt;&lt;(BitPlace-1)) : (*LPByte)|=(1&lt;&lt;(BitPlace-1)));</span></span></div></pre></td></tr></table></figure>\n<p>代码很简单，首先判断要设的值是1还是0，然后根据这个值来对1进行位移等位操作然后根据不同的值使用其他位操作来对特定的位设值。<br>不过根据评论，似乎对性能没有多大的影响。看到这段代码的感觉是，应该可以不用判断BitValue的值，而是对BitValue进行某些位操作来得到某个值，<br>之后使用这个值与LPByte进行一定位操作之后的结果进行某个位操作之后即可得到正确的值。果然，楼主在楼下提出了另一段代码，实现了我所想的方案：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#define SetBit(LPByte,BitPlace,BitValue) ( (*LPByte) = ( (*LPByte)&amp;~(1&lt;&lt;(BitPlace-1) ))|(BitValue&lt;&lt;(BitPlace-1)) );</div><div class=\"line\"></div><div class=\"line\">#define GetBit(LPByte,BitPlace,BitValue) ( BitValue=((*LPByte)&amp;(1&lt;&lt;(BitPlace-1)))&gt;&gt;(BitPlace-1) );</div></pre></td></tr></table></figure>\n<p>宏看起来都比较麻烦，而且这段宏还存在着一定的问题，为了方便我将其整理成为了一下代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">set_bit</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> b, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> value)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (b &amp; ~(<span class=\"number\">1</span> &lt;&lt; (pos - <span class=\"number\">1</span>))) | (value &lt;&lt; (pos - <span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_bit</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> b, <span class=\"keyword\">int</span> pos)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (b &amp; (<span class=\"number\">1</span> &lt;&lt; (pos - <span class=\"number\">1</span>))) &gt;&gt; (pos - <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这段宏改编的代码很简单，而且所采用的思想其实也很简单，对于set_bit函数来说，首先通过对1的位移和取反，然后与b进行与操作将该位置为0，<br>然后对value进行位移，之后再与之前清空后的结果进行或操作得到最后的结果。类似的，get_bit函数则是与set_bit函数相反，将其他位置位0而保留需要获取的位，<br>之后将其位移得到最后的结果。后来楼主又贴出了另外一段对n位进行处理的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GetNBit (LPByte,Begin,End,BitValue) (BitValue=((*LPByte)&amp;((255&gt;&gt;(8-End))&amp;(255<span class=\"meta-string\">&lt;&lt;(Begin-1))))&gt;</span>&gt;(Begin-1));</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SetNBit (LPByte,Begin,End,BitValue) (*LPByte)=((*LPByte)&amp;(~((255&gt;&gt;(8-End))&amp;(255<span class=\"meta-string\">&lt;&lt;(Begin-1)))))|(BitValue&lt;&lt;(Begin-1));</span></span></div></pre></td></tr></table></figure>\n<p>这段代码就不改写了，原理和之前的是一样的。当然，还有人提到了内联汇编，使用BT/BTS之类的命令，不过我觉得已经没有必要了。<br>虽然我不是很懂汇编，也没有测试，不过我对使用这些带有测试的操作能够比直接通过简单的位操作来得到结果更快持怀疑态度，<br>过段时间我想我会测试一下。</p>\n<p>不过既然提到了汇编，而主题又是位移什么的，不禁让我想起了以前看《深入理解计算机系统》的日子，情不自禁的将代码生成汇编代码观察了一番，<br>代码比较简单，没什么值得多说的，值得一提的是参数和本地变量是通过ebp寄存器做偏移得到的，eax寄存器则被频繁用于存储结果，并在最后用来<br>存储函数的返回值。而楼主以前使用switch很慢的原因，根据幻之上帝的说法是：要分支预测+间接操作慢个几十倍正常。</p>\n<p>回头想一下，其实这些操作与思想都是很基础的，尤其是将对某一位进行保留和置1/0这几个操作可以说是基础中的基础。再次提醒自己，<br>不论做什么事情，基础都是最重要的，不要只看到别人的光鲜亮丽，要静下心来学习，打好基础，只有基础好了，才能够从基础中演变出各种犀利的东西。</p>\n<p>参考资料（关于汇编的）：</p>\n<ol>\n<li><a href=\"https://www.cs.virginia.edu/~evans/cs216/guides/x86.html\" target=\"_blank\" rel=\"external\">x86 Assembly Guide</a></li>\n<li><a href=\"https://www.cse.nd.edu/~dthain/courses/cse40243/fall2008/ia32-intro.html\" target=\"_blank\" rel=\"external\">IA-32 Assembly for Compiler Writers</a></li>\n<li><a href=\"https://cseweb.ucsd.edu/classes/sp10/cse141/pdf/02/S01_x86_64.key.pdf\" target=\"_blank\" rel=\"external\">A Readers Guide to x86 Assembly(pdf)</a></li>\n<li><a href=\"http://www.cnblogs.com/justinyo/archive/2013/03/08/2950718.html\" target=\"_blank\" rel=\"external\">分析.cpp文件编译生成的汇编文件里语句的作用</a></li>\n</ol>\n","excerpt":"","more":"<p>昨天周六，下午把床晒了晒，在晒床的时候呢，我则躺在沙发上看了看《算法精解》，正好看到位运算。里面有两个简单的操作，<br>一个是对某一位设1/0，另一个则是获取某一位是1/0。当时的直觉是，代码写的简单直白，应该还有更高效的处理方法。</p>\n<p>虽然这个想法仅仅是在脑海中一闪而过，但是晚上正好在C++吧看到<a href=\"http://tieba.baidu.com/p/2900558125\">一篇帖子</a>，<br>楼主提出了类似的写法，并称该算法效率太差，希望高手指教。</p>\n<p>进去看了看，首先看到的是楼主说即使将mask存入数组，可还是太慢。另外有人给出了一段简单的代码片段，楼主根据这个代码片段写了一个简单的宏：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SetBit(LPByte,BitPlace,BitValue) ( BitValue==0? (*LPByte)&amp;=~(1<span class=\"meta-string\">&lt;&lt;(BitPlace-1)) : (*LPByte)|=(1&lt;&lt;(BitPlace-1)));</span></span></div></pre></td></tr></table></figure>\n<p>代码很简单，首先判断要设的值是1还是0，然后根据这个值来对1进行位移等位操作然后根据不同的值使用其他位操作来对特定的位设值。<br>不过根据评论，似乎对性能没有多大的影响。看到这段代码的感觉是，应该可以不用判断BitValue的值，而是对BitValue进行某些位操作来得到某个值，<br>之后使用这个值与LPByte进行一定位操作之后的结果进行某个位操作之后即可得到正确的值。果然，楼主在楼下提出了另一段代码，实现了我所想的方案：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#define SetBit(LPByte,BitPlace,BitValue) ( (*LPByte) = ( (*LPByte)&amp;~(1&lt;&lt;(BitPlace-1) ))|(BitValue&lt;&lt;(BitPlace-1)) );</div><div class=\"line\"></div><div class=\"line\">#define GetBit(LPByte,BitPlace,BitValue) ( BitValue=((*LPByte)&amp;(1&lt;&lt;(BitPlace-1)))&gt;&gt;(BitPlace-1) );</div></pre></td></tr></table></figure>\n<p>宏看起来都比较麻烦，而且这段宏还存在着一定的问题，为了方便我将其整理成为了一下代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">set_bit</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> b, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> value)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (b &amp; ~(<span class=\"number\">1</span> &lt;&lt; (pos - <span class=\"number\">1</span>))) | (value &lt;&lt; (pos - <span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_bit</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> b, <span class=\"keyword\">int</span> pos)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (b &amp; (<span class=\"number\">1</span> &lt;&lt; (pos - <span class=\"number\">1</span>))) &gt;&gt; (pos - <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这段宏改编的代码很简单，而且所采用的思想其实也很简单，对于set_bit函数来说，首先通过对1的位移和取反，然后与b进行与操作将该位置为0，<br>然后对value进行位移，之后再与之前清空后的结果进行或操作得到最后的结果。类似的，get_bit函数则是与set_bit函数相反，将其他位置位0而保留需要获取的位，<br>之后将其位移得到最后的结果。后来楼主又贴出了另外一段对n位进行处理的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GetNBit (LPByte,Begin,End,BitValue) (BitValue=((*LPByte)&amp;((255&gt;&gt;(8-End))&amp;(255<span class=\"meta-string\">&lt;&lt;(Begin-1))))&gt;</span>&gt;(Begin-1));</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SetNBit (LPByte,Begin,End,BitValue) (*LPByte)=((*LPByte)&amp;(~((255&gt;&gt;(8-End))&amp;(255<span class=\"meta-string\">&lt;&lt;(Begin-1)))))|(BitValue&lt;&lt;(Begin-1));</span></span></div></pre></td></tr></table></figure>\n<p>这段代码就不改写了，原理和之前的是一样的。当然，还有人提到了内联汇编，使用BT/BTS之类的命令，不过我觉得已经没有必要了。<br>虽然我不是很懂汇编，也没有测试，不过我对使用这些带有测试的操作能够比直接通过简单的位操作来得到结果更快持怀疑态度，<br>过段时间我想我会测试一下。</p>\n<p>不过既然提到了汇编，而主题又是位移什么的，不禁让我想起了以前看《深入理解计算机系统》的日子，情不自禁的将代码生成汇编代码观察了一番，<br>代码比较简单，没什么值得多说的，值得一提的是参数和本地变量是通过ebp寄存器做偏移得到的，eax寄存器则被频繁用于存储结果，并在最后用来<br>存储函数的返回值。而楼主以前使用switch很慢的原因，根据幻之上帝的说法是：要分支预测+间接操作慢个几十倍正常。</p>\n<p>回头想一下，其实这些操作与思想都是很基础的，尤其是将对某一位进行保留和置1/0这几个操作可以说是基础中的基础。再次提醒自己，<br>不论做什么事情，基础都是最重要的，不要只看到别人的光鲜亮丽，要静下心来学习，打好基础，只有基础好了，才能够从基础中演变出各种犀利的东西。</p>\n<p>参考资料（关于汇编的）：</p>\n<ol>\n<li><a href=\"https://www.cs.virginia.edu/~evans/cs216/guides/x86.html\">x86 Assembly Guide</a></li>\n<li><a href=\"https://www.cse.nd.edu/~dthain/courses/cse40243/fall2008/ia32-intro.html\">IA-32 Assembly for Compiler Writers</a></li>\n<li><a href=\"https://cseweb.ucsd.edu/classes/sp10/cse141/pdf/02/S01_x86_64.key.pdf\">A Readers Guide to x86 Assembly(pdf)</a></li>\n<li><a href=\"http://www.cnblogs.com/justinyo/archive/2013/03/08/2950718.html\">分析.cpp文件编译生成的汇编文件里语句的作用</a></li>\n</ol>\n"},{"layout":"post","title":"Golang Reflect 101","description":"golang reflect 101","modified":"2014-02-21T16:00:00.000Z","image":{"feature":"abstract-3.jpg","credit":"dargadgetz","creditlink":"http://www.dargadgetz.com/ios-7-abstract-wallpaper-pack-for-iphone-5-and-ipod-touch-retina/"},"comments":1,"share":true,"_content":"\n元编程是一个很有意思东西，正好golang中包含了一个reflect包提供反射功能，上周末看了看reflect包，在此记录一下学习体会。\n\n## 元编程\n\n首先，了解一下元编程及其相关概念。元编程是什么？元编程就是普通的编程。那么为什么会有元编程这个概念呢？这是因为元编程会做出一些比普通编程行为更酷的行为，它能够通过写好的代码来处理代码，因此给它起了一个新名字以示区分。听起来有些矛盾和拗口，下面来看一个例子说明一下吧。\n\n有过Qt或者MFC编程经验的人都知道，如果我们想要给按钮或者其他控件添加对某个事件的响应处理函数，只需要按照一定的明明规范来命名一个函数即可。例如在Qt中，想要对一个名叫btn的按钮绑定一个点击事件的处理函数只需要位该函数命名为`on_btn_clicked`即可。但是，我们并没有显示的将该函数和btn连接在一起，这是怎么做到的呢？Qt中一些代码会分析函数名，当检测到以`on_objectname_signalname`命名的函数时，Qt会自动将该函数和`objectname`对象的`signalname`信号绑定。这就是元编程，通过代码来对其他代码进行处理。\n\n## 反射(reflection)和内省(type introspection)\n\n[反射](http://en.wikipedia.org/wiki/Reflection_(computer_science))和[内省](http://en.wikipedia.org/wiki/Introspection_(computer_science))是和元编程息息相关的两个概念，这两个概念非常相似，但却有很大的不同。\n\n\t**内省**是在运行时检查对象的类型和属性的能力，**反射**是在运行时检查和修改程序结构和行为的能力。\n\n可以看出，反射比内省更加强大，内省是反射的子集，这一点不应该混淆。有些为地方可以看到说自省和反射是一回事，我想这个自省应该是根据`introspection`来翻译的，而`introspection`是`type introspection`的简称。so，不要相信那些人，他们应该去补习了。\n\n## golang reflect\n\n在golang中，提供了一个`reflect`包，这个包主要包含了两个主要类型`Type`和`Value`，并且在`reflect`包中还提供了两个非常方便的函数`TypeOf`和`ValueOf`来分别获得这两种类型。下面来看一段示例代码：\n~~~go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"regexp\"\n)\n\ntype Struct struct {\n\tPub string\n\tpri int `pri:\"private\"`\n}\n\nfunc (s *Struct) Pri() int {\n\treturn s.pri\n}\n\nfunc (s *Struct) sum(o int) int {\n\treturn s.pri + o\n}\n\nfunc (s *Struct) Sum(o int) int {\n\ts.pri = s.sum(o)\n\treturn s.pri\n}\n\nfunc (s *Struct) Name(firstName, lastName string) string {\n\treturn firstName + \" \" + lastName\n}\n\nfunc sum(a, b int) int {\n\treturn a + b\n}\n\nfunc main() {\n\ts := &Struct{}\n\tv := reflect.ValueOf(s)\n\tt := reflect.TypeOf(s)\n\n\tfmt.Println(\"Type:\", t)\n\tfmt.Println(\"Value:\", v)\n\tfmt.Println(\"Kind:\", t.Kind())\n\n\tfor i := 0; i < t.Elem().NumField(); i++ {\n\t\tf := t.Elem().Field(i)\n\t\tfmt.Printf(\"struct field %d: %s, %s， embeded?: %v, tag: %v\\n\", i, f.Name, f.Type, f.Anonymous, f.Tag)\n\t}\n\tfor i := 0; i < t.NumMethod(); i++ {\n\t\tm := t.Method(i)\n\t\tfmt.Printf(\"struct field %d: %s, %s\\n\", i, m.Name, m.Type)\n\t}\n\n\tcallMethod := func(s reflect.Value, methodName string, methodArgs ...reflect.Value) ([]reflect.Value, error) {\n\t\tt := s.Type()\n\t\tmethod, exist := t.MethodByName(methodName)\n\t\tif !exist {\n\t\t\treturn nil, fmt.Errorf(\"\\\"%s\\\": is not existed for %s\", methodName, t)\n\t\t}\n\n\t\tif regexp.MustCompile(`^[a-z]`).MatchString(method.Name) {\n\t\t\treturn nil, fmt.Errorf(\"\\\"%s\\\": unexported field cannot be called\", method.Name)\n\t\t}\n\n\t\targs := []reflect.Value{s}\n\t\targs = append(args, methodArgs...)\n\n\t\treturn method.Func.Call(args), nil\n\t}\n\n\tfmt.Print(\"call Struct.Pri: \")\n\tfmt.Println(callMethod(v, \"Pri\"))\n\n\tfmt.Print(\"call Struct.Sum: \")\n\tfmt.Println(callMethod(v, \"Sum\", reflect.ValueOf(1)))\n\n\tfmt.Print(\"call Struct.Name: \")\n\tfmt.Println(callMethod(v, \"Name\", reflect.ValueOf(\"David\"), reflect.ValueOf(\"Beckham\")))\n\n\tfmt.Print(\"call Struct.sum: \")\n\tfmt.Println(callMethod(v, \"sum\", reflect.ValueOf(1)))\n\n\tfmt.Print(\"call Struct.s: \")\n\tfmt.Println(callMethod(v, \"s\"))\n\n\tfn := reflect.ValueOf(sum)\n\tft := fn.Type()\n\tfor i := 0; i < ft.NumIn(); i++ {\n\t\tin := ft.In(i)\n\t\tfmt.Printf(\"function argument %d: %s\\n\", i, in)\n\t}\n\tfor i := 0; i < ft.NumOut(); i++ {\n\t\tout := ft.In(i)\n\t\tfmt.Printf(\"function return value %d: %s\\n\", i, out)\n\t}\n\n\ti, j := 1, 3\n\tfmt.Printf(\"Call sum(%d, %d) function: %v\\n\",\n\t\ti, j,\n\t\tfn.Call([]reflect.Value{\n\t\t\treflect.ValueOf(i),\n\t\t\treflect.ValueOf(j),\n\t\t})[0].Interface(),\n\t)\n}\n~~~\n\n如果运行这段代码会得到一下输出：\n~~~bash\nType: *main.Struct\nValue: <*main.Struct Value>\nKind: ptr\nstruct field 0: Pub, string, embeded?: false, tag: \nstruct field 1: pri, int, embeded?: false, tag: pri:\"private\"\nstruct field 0: Name, func(*main.Struct, string, string) string\nstruct field 1: Pri, func(*main.Struct) int\nstruct field 2: Sum, func(*main.Struct, int) int\nstruct field 3: sum, func(*main.Struct, int) int\ncall Struct.Pri: [<int Value>] <nil>\ncall Struct.Sum: [<int Value>] <nil>\ncall Struct.Name: [David Beckham] <nil>\ncall Struct.sum: [] \"sum\": unexported field cannot be called\ncall Struct.s: [] \"s\": is not existed for *main.Struct\nfunction argument 0: int\nfunction argument 1: int\nfunction return value 0: int\nCall sum(1, 3) function: 4\n~~~\n\n\n## 代码分析\n\n这段代码虽然有点长，不过却非常简单和清晰，现在来分析一下这段代码及其输出结果。\n\n在代码的开始部分，通过`reflect.ValueOf`来获取`Struct`结构体指针的值信息，通过`reflect.TypeOf`来获取`Struct`结构体指针的类型信息，需要留意的地方是，这里创建的是一个`Struct`的结构体指针，而不是一个`Struct`结构体。\n\n### Kind\n\n在代码的第47行调用了一个叫`Kind`的方法，`Kind`方法是用来表示一个`Type`是属于哪一种类型的，因此，通过`Kind`方法也可以准确的判断出这是一个`ptr`。\n\n\n### Elem\n\n在遍历结构体字段时用到了一个叫`Elem`的方法，由于`s`是一个指针类型，因此需要通过`Value.Elem`得到结构体的值信息，这样才能获取`Struct`结构体中的字段信息。同时需要注意，`Value.Elem`方法只对指针和接口——例如`error`——有效。\n\n在`reflect.Value`和`reflect.Type`中有不少命名相同的方法，不过意义却不一样，`Elem`就是一个典型的例子，与`Value.Elem`不同，在`reflect.Type`中`Type.Elem`用来可以用来表示map中值的类型。\n\n\n### struct tag\n\n在golang中有一个被成为`struct tag`的东西，每次见到这个东西都感觉怪怪的，通常也很少使用。\n\n`struct tag`通常是一个用空格分隔的键值对，在键中不包含双引号，冒号和空格，而值则是由双引号引起来的任意字符。\n\n不过鉴于`struct tag`是一个字符串，而`reflect.StructTag`本身其实也是一个字符串，也许可以在适当的时候自由发挥一下。另外，`reflect.StructTag`只有一个`Get`方法。\n\n下面是来自`reflect`包文档中的一个例子，更详细的展示了`struct tag`的用法：\n\n~~~go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\nfunc main() {\n\ttype S struct {\n\t\tF string `species:\"gopher\" color:\"blue\"`\n\t}\n\n\ts := S{}\n\tst := reflect.TypeOf(s)\n\tfield := st.Field(0)\n\tfmt.Println(field.Tag.Get(\"color\"), field.Tag.Get(\"species\"))\n\n}\n~~~\n\n\n### Method and Call\n\n接下来是`callMethod`函数。在`callMethod`函数中有几个地方需要注意。\n\n首先是通过`reflect.Type`中的`MethodByName`方法来获取`reflect.Method`类型的方法信息，以及判断该方法是否存在。\n\n如果你愿意，同样可以使用`reflect.Value`中的`MethodByName`方法来获得`reflect.Value`类型的方法信息，然后通过`Value.IsValid`来判断该方法是否存在。这里的`reflect.Value`类型的信息等于`reflect.Method`类型中的`Func`字段。\n\n第二个需要注意的地方时这里通过使用正则表达式来判断方法的名字的首字母大小写来判断该方法是否导出，这是由于`reflect`包中似乎并没有提供可以判断方法和字段是否导出的方法。\n\n第三，在调用一个结构体方法时，需要将`receiver`作为第一个参数传递个方法。\n\n\n### Value.Type()\n\n在对`sum`进行反射时并没有使用`reflect.TypeOf`，而是使用了`Value.Type`方法，这个方法同样可以得到类型信息。\n\n\n### Interface\n\n在代码的最后一部分取得返回值时使用了`Value.Interface`方法。该方法的作用是返回一个`interface{}`以便能够获取真正的值。\n\n\n## 改变对象的值\n\n`reflect`包出了获取各种信息以外，还可以改变变量的值。一个对象能否设值，可以通过`Value.CanSet`方法来判断。不过需要记住，只有指针类型通过`Elem`函数来得到真正的对象才能设值。这是因为在[laws of reflection](http://golang.org/doc/articles/laws_of_reflection.html)中有这么一句话：\n\n>\tJust keep in mind that reflection Values need the address of something in order to modify what they represent.\n\n\n## 总结\n\n`reflect`保重常用的方法克功能基本都涉及到了，不过并没有事无巨细的讲解，还有channel，slice，map，embeded field等没涉及到，更详细的内容只有一边在实际中去探索，一边参看引用，才会更有意义。希望元编程能够在适当的地方改善我们的生活。\n\n\n## reference\n\n1. [golang reflect package document](http://golang.org/pkg/reflect/).\n2. [laws of reflection](http://golang.org/doc/articles/laws_of_reflection.html).(注：网上有有中文翻译版本。)\n","source":"_posts/2014-06-20-golang-reflect-101.md","raw":"---\nlayout: post\ntitle: Golang Reflect 101\ndescription: \"golang reflect 101\"\nmodified: 2014-02-22\ntags: [golang, go]\nimage:\n  feature: abstract-3.jpg\n  credit: dargadgetz\n  creditlink: http://www.dargadgetz.com/ios-7-abstract-wallpaper-pack-for-iphone-5-and-ipod-touch-retina/\ncomments: true\nshare: true\n---\n\n元编程是一个很有意思东西，正好golang中包含了一个reflect包提供反射功能，上周末看了看reflect包，在此记录一下学习体会。\n\n## 元编程\n\n首先，了解一下元编程及其相关概念。元编程是什么？元编程就是普通的编程。那么为什么会有元编程这个概念呢？这是因为元编程会做出一些比普通编程行为更酷的行为，它能够通过写好的代码来处理代码，因此给它起了一个新名字以示区分。听起来有些矛盾和拗口，下面来看一个例子说明一下吧。\n\n有过Qt或者MFC编程经验的人都知道，如果我们想要给按钮或者其他控件添加对某个事件的响应处理函数，只需要按照一定的明明规范来命名一个函数即可。例如在Qt中，想要对一个名叫btn的按钮绑定一个点击事件的处理函数只需要位该函数命名为`on_btn_clicked`即可。但是，我们并没有显示的将该函数和btn连接在一起，这是怎么做到的呢？Qt中一些代码会分析函数名，当检测到以`on_objectname_signalname`命名的函数时，Qt会自动将该函数和`objectname`对象的`signalname`信号绑定。这就是元编程，通过代码来对其他代码进行处理。\n\n## 反射(reflection)和内省(type introspection)\n\n[反射](http://en.wikipedia.org/wiki/Reflection_(computer_science))和[内省](http://en.wikipedia.org/wiki/Introspection_(computer_science))是和元编程息息相关的两个概念，这两个概念非常相似，但却有很大的不同。\n\n\t**内省**是在运行时检查对象的类型和属性的能力，**反射**是在运行时检查和修改程序结构和行为的能力。\n\n可以看出，反射比内省更加强大，内省是反射的子集，这一点不应该混淆。有些为地方可以看到说自省和反射是一回事，我想这个自省应该是根据`introspection`来翻译的，而`introspection`是`type introspection`的简称。so，不要相信那些人，他们应该去补习了。\n\n## golang reflect\n\n在golang中，提供了一个`reflect`包，这个包主要包含了两个主要类型`Type`和`Value`，并且在`reflect`包中还提供了两个非常方便的函数`TypeOf`和`ValueOf`来分别获得这两种类型。下面来看一段示例代码：\n~~~go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"regexp\"\n)\n\ntype Struct struct {\n\tPub string\n\tpri int `pri:\"private\"`\n}\n\nfunc (s *Struct) Pri() int {\n\treturn s.pri\n}\n\nfunc (s *Struct) sum(o int) int {\n\treturn s.pri + o\n}\n\nfunc (s *Struct) Sum(o int) int {\n\ts.pri = s.sum(o)\n\treturn s.pri\n}\n\nfunc (s *Struct) Name(firstName, lastName string) string {\n\treturn firstName + \" \" + lastName\n}\n\nfunc sum(a, b int) int {\n\treturn a + b\n}\n\nfunc main() {\n\ts := &Struct{}\n\tv := reflect.ValueOf(s)\n\tt := reflect.TypeOf(s)\n\n\tfmt.Println(\"Type:\", t)\n\tfmt.Println(\"Value:\", v)\n\tfmt.Println(\"Kind:\", t.Kind())\n\n\tfor i := 0; i < t.Elem().NumField(); i++ {\n\t\tf := t.Elem().Field(i)\n\t\tfmt.Printf(\"struct field %d: %s, %s， embeded?: %v, tag: %v\\n\", i, f.Name, f.Type, f.Anonymous, f.Tag)\n\t}\n\tfor i := 0; i < t.NumMethod(); i++ {\n\t\tm := t.Method(i)\n\t\tfmt.Printf(\"struct field %d: %s, %s\\n\", i, m.Name, m.Type)\n\t}\n\n\tcallMethod := func(s reflect.Value, methodName string, methodArgs ...reflect.Value) ([]reflect.Value, error) {\n\t\tt := s.Type()\n\t\tmethod, exist := t.MethodByName(methodName)\n\t\tif !exist {\n\t\t\treturn nil, fmt.Errorf(\"\\\"%s\\\": is not existed for %s\", methodName, t)\n\t\t}\n\n\t\tif regexp.MustCompile(`^[a-z]`).MatchString(method.Name) {\n\t\t\treturn nil, fmt.Errorf(\"\\\"%s\\\": unexported field cannot be called\", method.Name)\n\t\t}\n\n\t\targs := []reflect.Value{s}\n\t\targs = append(args, methodArgs...)\n\n\t\treturn method.Func.Call(args), nil\n\t}\n\n\tfmt.Print(\"call Struct.Pri: \")\n\tfmt.Println(callMethod(v, \"Pri\"))\n\n\tfmt.Print(\"call Struct.Sum: \")\n\tfmt.Println(callMethod(v, \"Sum\", reflect.ValueOf(1)))\n\n\tfmt.Print(\"call Struct.Name: \")\n\tfmt.Println(callMethod(v, \"Name\", reflect.ValueOf(\"David\"), reflect.ValueOf(\"Beckham\")))\n\n\tfmt.Print(\"call Struct.sum: \")\n\tfmt.Println(callMethod(v, \"sum\", reflect.ValueOf(1)))\n\n\tfmt.Print(\"call Struct.s: \")\n\tfmt.Println(callMethod(v, \"s\"))\n\n\tfn := reflect.ValueOf(sum)\n\tft := fn.Type()\n\tfor i := 0; i < ft.NumIn(); i++ {\n\t\tin := ft.In(i)\n\t\tfmt.Printf(\"function argument %d: %s\\n\", i, in)\n\t}\n\tfor i := 0; i < ft.NumOut(); i++ {\n\t\tout := ft.In(i)\n\t\tfmt.Printf(\"function return value %d: %s\\n\", i, out)\n\t}\n\n\ti, j := 1, 3\n\tfmt.Printf(\"Call sum(%d, %d) function: %v\\n\",\n\t\ti, j,\n\t\tfn.Call([]reflect.Value{\n\t\t\treflect.ValueOf(i),\n\t\t\treflect.ValueOf(j),\n\t\t})[0].Interface(),\n\t)\n}\n~~~\n\n如果运行这段代码会得到一下输出：\n~~~bash\nType: *main.Struct\nValue: <*main.Struct Value>\nKind: ptr\nstruct field 0: Pub, string, embeded?: false, tag: \nstruct field 1: pri, int, embeded?: false, tag: pri:\"private\"\nstruct field 0: Name, func(*main.Struct, string, string) string\nstruct field 1: Pri, func(*main.Struct) int\nstruct field 2: Sum, func(*main.Struct, int) int\nstruct field 3: sum, func(*main.Struct, int) int\ncall Struct.Pri: [<int Value>] <nil>\ncall Struct.Sum: [<int Value>] <nil>\ncall Struct.Name: [David Beckham] <nil>\ncall Struct.sum: [] \"sum\": unexported field cannot be called\ncall Struct.s: [] \"s\": is not existed for *main.Struct\nfunction argument 0: int\nfunction argument 1: int\nfunction return value 0: int\nCall sum(1, 3) function: 4\n~~~\n\n\n## 代码分析\n\n这段代码虽然有点长，不过却非常简单和清晰，现在来分析一下这段代码及其输出结果。\n\n在代码的开始部分，通过`reflect.ValueOf`来获取`Struct`结构体指针的值信息，通过`reflect.TypeOf`来获取`Struct`结构体指针的类型信息，需要留意的地方是，这里创建的是一个`Struct`的结构体指针，而不是一个`Struct`结构体。\n\n### Kind\n\n在代码的第47行调用了一个叫`Kind`的方法，`Kind`方法是用来表示一个`Type`是属于哪一种类型的，因此，通过`Kind`方法也可以准确的判断出这是一个`ptr`。\n\n\n### Elem\n\n在遍历结构体字段时用到了一个叫`Elem`的方法，由于`s`是一个指针类型，因此需要通过`Value.Elem`得到结构体的值信息，这样才能获取`Struct`结构体中的字段信息。同时需要注意，`Value.Elem`方法只对指针和接口——例如`error`——有效。\n\n在`reflect.Value`和`reflect.Type`中有不少命名相同的方法，不过意义却不一样，`Elem`就是一个典型的例子，与`Value.Elem`不同，在`reflect.Type`中`Type.Elem`用来可以用来表示map中值的类型。\n\n\n### struct tag\n\n在golang中有一个被成为`struct tag`的东西，每次见到这个东西都感觉怪怪的，通常也很少使用。\n\n`struct tag`通常是一个用空格分隔的键值对，在键中不包含双引号，冒号和空格，而值则是由双引号引起来的任意字符。\n\n不过鉴于`struct tag`是一个字符串，而`reflect.StructTag`本身其实也是一个字符串，也许可以在适当的时候自由发挥一下。另外，`reflect.StructTag`只有一个`Get`方法。\n\n下面是来自`reflect`包文档中的一个例子，更详细的展示了`struct tag`的用法：\n\n~~~go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\nfunc main() {\n\ttype S struct {\n\t\tF string `species:\"gopher\" color:\"blue\"`\n\t}\n\n\ts := S{}\n\tst := reflect.TypeOf(s)\n\tfield := st.Field(0)\n\tfmt.Println(field.Tag.Get(\"color\"), field.Tag.Get(\"species\"))\n\n}\n~~~\n\n\n### Method and Call\n\n接下来是`callMethod`函数。在`callMethod`函数中有几个地方需要注意。\n\n首先是通过`reflect.Type`中的`MethodByName`方法来获取`reflect.Method`类型的方法信息，以及判断该方法是否存在。\n\n如果你愿意，同样可以使用`reflect.Value`中的`MethodByName`方法来获得`reflect.Value`类型的方法信息，然后通过`Value.IsValid`来判断该方法是否存在。这里的`reflect.Value`类型的信息等于`reflect.Method`类型中的`Func`字段。\n\n第二个需要注意的地方时这里通过使用正则表达式来判断方法的名字的首字母大小写来判断该方法是否导出，这是由于`reflect`包中似乎并没有提供可以判断方法和字段是否导出的方法。\n\n第三，在调用一个结构体方法时，需要将`receiver`作为第一个参数传递个方法。\n\n\n### Value.Type()\n\n在对`sum`进行反射时并没有使用`reflect.TypeOf`，而是使用了`Value.Type`方法，这个方法同样可以得到类型信息。\n\n\n### Interface\n\n在代码的最后一部分取得返回值时使用了`Value.Interface`方法。该方法的作用是返回一个`interface{}`以便能够获取真正的值。\n\n\n## 改变对象的值\n\n`reflect`包出了获取各种信息以外，还可以改变变量的值。一个对象能否设值，可以通过`Value.CanSet`方法来判断。不过需要记住，只有指针类型通过`Elem`函数来得到真正的对象才能设值。这是因为在[laws of reflection](http://golang.org/doc/articles/laws_of_reflection.html)中有这么一句话：\n\n>\tJust keep in mind that reflection Values need the address of something in order to modify what they represent.\n\n\n## 总结\n\n`reflect`保重常用的方法克功能基本都涉及到了，不过并没有事无巨细的讲解，还有channel，slice，map，embeded field等没涉及到，更详细的内容只有一边在实际中去探索，一边参看引用，才会更有意义。希望元编程能够在适当的地方改善我们的生活。\n\n\n## reference\n\n1. [golang reflect package document](http://golang.org/pkg/reflect/).\n2. [laws of reflection](http://golang.org/doc/articles/laws_of_reflection.html).(注：网上有有中文翻译版本。)\n","slug":"2014-06-20-golang-reflect-101","published":1,"date":"2016-12-27T12:44:42.174Z","updated":"2016-12-27T12:44:42.170Z","_id":"cix7i6arm0004271jhbxrgabp","photos":[],"link":"","content":"<p>元编程是一个很有意思东西，正好golang中包含了一个reflect包提供反射功能，上周末看了看reflect包，在此记录一下学习体会。</p>\n<h2 id=\"元编程\"><a href=\"#元编程\" class=\"headerlink\" title=\"元编程\"></a>元编程</h2><p>首先，了解一下元编程及其相关概念。元编程是什么？元编程就是普通的编程。那么为什么会有元编程这个概念呢？这是因为元编程会做出一些比普通编程行为更酷的行为，它能够通过写好的代码来处理代码，因此给它起了一个新名字以示区分。听起来有些矛盾和拗口，下面来看一个例子说明一下吧。</p>\n<p>有过Qt或者MFC编程经验的人都知道，如果我们想要给按钮或者其他控件添加对某个事件的响应处理函数，只需要按照一定的明明规范来命名一个函数即可。例如在Qt中，想要对一个名叫btn的按钮绑定一个点击事件的处理函数只需要位该函数命名为<code>on_btn_clicked</code>即可。但是，我们并没有显示的将该函数和btn连接在一起，这是怎么做到的呢？Qt中一些代码会分析函数名，当检测到以<code>on_objectname_signalname</code>命名的函数时，Qt会自动将该函数和<code>objectname</code>对象的<code>signalname</code>信号绑定。这就是元编程，通过代码来对其他代码进行处理。</p>\n<h2 id=\"反射-reflection-和内省-type-introspection\"><a href=\"#反射-reflection-和内省-type-introspection\" class=\"headerlink\" title=\"反射(reflection)和内省(type introspection)\"></a>反射(reflection)和内省(type introspection)</h2><p><a href=\"http://en.wikipedia.org/wiki/Reflection_(computer_science\" target=\"_blank\" rel=\"external\">反射</a>)和<a href=\"http://en.wikipedia.org/wiki/Introspection_(computer_science\" target=\"_blank\" rel=\"external\">内省</a>)是和元编程息息相关的两个概念，这两个概念非常相似，但却有很大的不同。</p>\n<pre><code>**内省**是在运行时检查对象的类型和属性的能力，**反射**是在运行时检查和修改程序结构和行为的能力。\n</code></pre><p>可以看出，反射比内省更加强大，内省是反射的子集，这一点不应该混淆。有些为地方可以看到说自省和反射是一回事，我想这个自省应该是根据<code>introspection</code>来翻译的，而<code>introspection</code>是<code>type introspection</code>的简称。so，不要相信那些人，他们应该去补习了。</p>\n<h2 id=\"golang-reflect\"><a href=\"#golang-reflect\" class=\"headerlink\" title=\"golang reflect\"></a>golang reflect</h2><p>在golang中，提供了一个<code>reflect</code>包，这个包主要包含了两个主要类型<code>Type</code>和<code>Value</code>，并且在<code>reflect</code>包中还提供了两个非常方便的函数<code>TypeOf</code>和<code>ValueOf</code>来分别获得这两种类型。下面来看一段示例代码：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"reflect\"</span></div><div class=\"line\">\t<span class=\"string\">\"regexp\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Struct <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tPub <span class=\"keyword\">string</span></div><div class=\"line\">\tpri <span class=\"keyword\">int</span> <span class=\"string\">`pri:\"private\"`</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Struct)</span> <span class=\"title\">Pri</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> s.pri</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Struct)</span> <span class=\"title\">sum</span><span class=\"params\">(o <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> s.pri + o</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Struct)</span> <span class=\"title\">Sum</span><span class=\"params\">(o <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">\ts.pri = s.sum(o)</div><div class=\"line\">\t<span class=\"keyword\">return</span> s.pri</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Struct)</span> <span class=\"title\">Name</span><span class=\"params\">(firstName, lastName <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> firstName + <span class=\"string\">\" \"</span> + lastName</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a + b</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\ts := &amp;Struct&#123;&#125;</div><div class=\"line\">\tv := reflect.ValueOf(s)</div><div class=\"line\">\tt := reflect.TypeOf(s)</div><div class=\"line\"></div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"Type:\"</span>, t)</div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"Value:\"</span>, v)</div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"Kind:\"</span>, t.Kind())</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; t.Elem().NumField(); i++ &#123;</div><div class=\"line\">\t\tf := t.Elem().Field(i)</div><div class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"struct field %d: %s, %s， embeded?: %v, tag: %v\\n\"</span>, i, f.Name, f.Type, f.Anonymous, f.Tag)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; t.NumMethod(); i++ &#123;</div><div class=\"line\">\t\tm := t.Method(i)</div><div class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"struct field %d: %s, %s\\n\"</span>, i, m.Name, m.Type)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tcallMethod := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(s reflect.Value, methodName <span class=\"keyword\">string</span>, methodArgs ...reflect.Value)</span> <span class=\"params\">([]reflect.Value, error)</span></span> &#123;</div><div class=\"line\">\t\tt := s.Type()</div><div class=\"line\">\t\tmethod, exist := t.MethodByName(methodName)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> !exist &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"\\\"%s\\\": is not existed for %s\"</span>, methodName, t)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> regexp.MustCompile(<span class=\"string\">`^[a-z]`</span>).MatchString(method.Name) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"\\\"%s\\\": unexported field cannot be called\"</span>, method.Name)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\targs := []reflect.Value&#123;s&#125;</div><div class=\"line\">\t\targs = <span class=\"built_in\">append</span>(args, methodArgs...)</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> method.Func.Call(args), <span class=\"literal\">nil</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tfmt.Print(<span class=\"string\">\"call Struct.Pri: \"</span>)</div><div class=\"line\">\tfmt.Println(callMethod(v, <span class=\"string\">\"Pri\"</span>))</div><div class=\"line\"></div><div class=\"line\">\tfmt.Print(<span class=\"string\">\"call Struct.Sum: \"</span>)</div><div class=\"line\">\tfmt.Println(callMethod(v, <span class=\"string\">\"Sum\"</span>, reflect.ValueOf(<span class=\"number\">1</span>)))</div><div class=\"line\"></div><div class=\"line\">\tfmt.Print(<span class=\"string\">\"call Struct.Name: \"</span>)</div><div class=\"line\">\tfmt.Println(callMethod(v, <span class=\"string\">\"Name\"</span>, reflect.ValueOf(<span class=\"string\">\"David\"</span>), reflect.ValueOf(<span class=\"string\">\"Beckham\"</span>)))</div><div class=\"line\"></div><div class=\"line\">\tfmt.Print(<span class=\"string\">\"call Struct.sum: \"</span>)</div><div class=\"line\">\tfmt.Println(callMethod(v, <span class=\"string\">\"sum\"</span>, reflect.ValueOf(<span class=\"number\">1</span>)))</div><div class=\"line\"></div><div class=\"line\">\tfmt.Print(<span class=\"string\">\"call Struct.s: \"</span>)</div><div class=\"line\">\tfmt.Println(callMethod(v, <span class=\"string\">\"s\"</span>))</div><div class=\"line\"></div><div class=\"line\">\tfn := reflect.ValueOf(sum)</div><div class=\"line\">\tft := fn.Type()</div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; ft.NumIn(); i++ &#123;</div><div class=\"line\">\t\tin := ft.In(i)</div><div class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"function argument %d: %s\\n\"</span>, i, in)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; ft.NumOut(); i++ &#123;</div><div class=\"line\">\t\tout := ft.In(i)</div><div class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"function return value %d: %s\\n\"</span>, i, out)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\ti, j := <span class=\"number\">1</span>, <span class=\"number\">3</span></div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"Call sum(%d, %d) function: %v\\n\"</span>,</div><div class=\"line\">\t\ti, j,</div><div class=\"line\">\t\tfn.Call([]reflect.Value&#123;</div><div class=\"line\">\t\t\treflect.ValueOf(i),</div><div class=\"line\">\t\t\treflect.ValueOf(j),</div><div class=\"line\">\t\t&#125;)[<span class=\"number\">0</span>].Interface(),</div><div class=\"line\">\t)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果运行这段代码会得到一下输出：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">Type: *main.Struct</div><div class=\"line\">Value: &lt;*main.Struct Value&gt;</div><div class=\"line\">Kind: ptr</div><div class=\"line\">struct field 0: Pub, string, embeded?: <span class=\"literal\">false</span>, tag: </div><div class=\"line\">struct field 1: pri, int, embeded?: <span class=\"literal\">false</span>, tag: pri:<span class=\"string\">\"private\"</span></div><div class=\"line\">struct field 0: Name, func(*main.Struct, string, string) string</div><div class=\"line\">struct field 1: Pri, func(*main.Struct) int</div><div class=\"line\">struct field 2: Sum, func(*main.Struct, int) int</div><div class=\"line\">struct field 3: sum, func(*main.Struct, int) int</div><div class=\"line\">call Struct.Pri: [&lt;int Value&gt;] &lt;nil&gt;</div><div class=\"line\">call Struct.Sum: [&lt;int Value&gt;] &lt;nil&gt;</div><div class=\"line\">call Struct.Name: [David Beckham] &lt;nil&gt;</div><div class=\"line\">call Struct.sum: [] <span class=\"string\">\"sum\"</span>: unexported field cannot be called</div><div class=\"line\">call Struct.s: [] <span class=\"string\">\"s\"</span>: is not existed <span class=\"keyword\">for</span> *main.Struct</div><div class=\"line\"><span class=\"keyword\">function</span> argument 0: int</div><div class=\"line\"><span class=\"keyword\">function</span> argument 1: int</div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"built_in\">return</span> value 0: int</div><div class=\"line\">Call sum(1, 3) <span class=\"keyword\">function</span>: 4</div></pre></td></tr></table></figure></p>\n<h2 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h2><p>这段代码虽然有点长，不过却非常简单和清晰，现在来分析一下这段代码及其输出结果。</p>\n<p>在代码的开始部分，通过<code>reflect.ValueOf</code>来获取<code>Struct</code>结构体指针的值信息，通过<code>reflect.TypeOf</code>来获取<code>Struct</code>结构体指针的类型信息，需要留意的地方是，这里创建的是一个<code>Struct</code>的结构体指针，而不是一个<code>Struct</code>结构体。</p>\n<h3 id=\"Kind\"><a href=\"#Kind\" class=\"headerlink\" title=\"Kind\"></a>Kind</h3><p>在代码的第47行调用了一个叫<code>Kind</code>的方法，<code>Kind</code>方法是用来表示一个<code>Type</code>是属于哪一种类型的，因此，通过<code>Kind</code>方法也可以准确的判断出这是一个<code>ptr</code>。</p>\n<h3 id=\"Elem\"><a href=\"#Elem\" class=\"headerlink\" title=\"Elem\"></a>Elem</h3><p>在遍历结构体字段时用到了一个叫<code>Elem</code>的方法，由于<code>s</code>是一个指针类型，因此需要通过<code>Value.Elem</code>得到结构体的值信息，这样才能获取<code>Struct</code>结构体中的字段信息。同时需要注意，<code>Value.Elem</code>方法只对指针和接口——例如<code>error</code>——有效。</p>\n<p>在<code>reflect.Value</code>和<code>reflect.Type</code>中有不少命名相同的方法，不过意义却不一样，<code>Elem</code>就是一个典型的例子，与<code>Value.Elem</code>不同，在<code>reflect.Type</code>中<code>Type.Elem</code>用来可以用来表示map中值的类型。</p>\n<h3 id=\"struct-tag\"><a href=\"#struct-tag\" class=\"headerlink\" title=\"struct tag\"></a>struct tag</h3><p>在golang中有一个被成为<code>struct tag</code>的东西，每次见到这个东西都感觉怪怪的，通常也很少使用。</p>\n<p><code>struct tag</code>通常是一个用空格分隔的键值对，在键中不包含双引号，冒号和空格，而值则是由双引号引起来的任意字符。</p>\n<p>不过鉴于<code>struct tag</code>是一个字符串，而<code>reflect.StructTag</code>本身其实也是一个字符串，也许可以在适当的时候自由发挥一下。另外，<code>reflect.StructTag</code>只有一个<code>Get</code>方法。</p>\n<p>下面是来自<code>reflect</code>包文档中的一个例子，更详细的展示了<code>struct tag</code>的用法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"reflect\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">type</span> S <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t\tF <span class=\"keyword\">string</span> <span class=\"string\">`species:\"gopher\" color:\"blue\"`</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\ts := S&#123;&#125;</div><div class=\"line\">\tst := reflect.TypeOf(s)</div><div class=\"line\">\tfield := st.Field(<span class=\"number\">0</span>)</div><div class=\"line\">\tfmt.Println(field.Tag.Get(<span class=\"string\">\"color\"</span>), field.Tag.Get(<span class=\"string\">\"species\"</span>))</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Method-and-Call\"><a href=\"#Method-and-Call\" class=\"headerlink\" title=\"Method and Call\"></a>Method and Call</h3><p>接下来是<code>callMethod</code>函数。在<code>callMethod</code>函数中有几个地方需要注意。</p>\n<p>首先是通过<code>reflect.Type</code>中的<code>MethodByName</code>方法来获取<code>reflect.Method</code>类型的方法信息，以及判断该方法是否存在。</p>\n<p>如果你愿意，同样可以使用<code>reflect.Value</code>中的<code>MethodByName</code>方法来获得<code>reflect.Value</code>类型的方法信息，然后通过<code>Value.IsValid</code>来判断该方法是否存在。这里的<code>reflect.Value</code>类型的信息等于<code>reflect.Method</code>类型中的<code>Func</code>字段。</p>\n<p>第二个需要注意的地方时这里通过使用正则表达式来判断方法的名字的首字母大小写来判断该方法是否导出，这是由于<code>reflect</code>包中似乎并没有提供可以判断方法和字段是否导出的方法。</p>\n<p>第三，在调用一个结构体方法时，需要将<code>receiver</code>作为第一个参数传递个方法。</p>\n<h3 id=\"Value-Type\"><a href=\"#Value-Type\" class=\"headerlink\" title=\"Value.Type()\"></a>Value.Type()</h3><p>在对<code>sum</code>进行反射时并没有使用<code>reflect.TypeOf</code>，而是使用了<code>Value.Type</code>方法，这个方法同样可以得到类型信息。</p>\n<h3 id=\"Interface\"><a href=\"#Interface\" class=\"headerlink\" title=\"Interface\"></a>Interface</h3><p>在代码的最后一部分取得返回值时使用了<code>Value.Interface</code>方法。该方法的作用是返回一个<code>interface{}</code>以便能够获取真正的值。</p>\n<h2 id=\"改变对象的值\"><a href=\"#改变对象的值\" class=\"headerlink\" title=\"改变对象的值\"></a>改变对象的值</h2><p><code>reflect</code>包出了获取各种信息以外，还可以改变变量的值。一个对象能否设值，可以通过<code>Value.CanSet</code>方法来判断。不过需要记住，只有指针类型通过<code>Elem</code>函数来得到真正的对象才能设值。这是因为在<a href=\"http://golang.org/doc/articles/laws_of_reflection.html\" target=\"_blank\" rel=\"external\">laws of reflection</a>中有这么一句话：</p>\n<blockquote>\n<p>   Just keep in mind that reflection Values need the address of something in order to modify what they represent.</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>reflect</code>保重常用的方法克功能基本都涉及到了，不过并没有事无巨细的讲解，还有channel，slice，map，embeded field等没涉及到，更详细的内容只有一边在实际中去探索，一边参看引用，才会更有意义。希望元编程能够在适当的地方改善我们的生活。</p>\n<h2 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h2><ol>\n<li><a href=\"http://golang.org/pkg/reflect/\" target=\"_blank\" rel=\"external\">golang reflect package document</a>.</li>\n<li><a href=\"http://golang.org/doc/articles/laws_of_reflection.html\" target=\"_blank\" rel=\"external\">laws of reflection</a>.(注：网上有有中文翻译版本。)</li>\n</ol>\n","excerpt":"","more":"<p>元编程是一个很有意思东西，正好golang中包含了一个reflect包提供反射功能，上周末看了看reflect包，在此记录一下学习体会。</p>\n<h2 id=\"元编程\"><a href=\"#元编程\" class=\"headerlink\" title=\"元编程\"></a>元编程</h2><p>首先，了解一下元编程及其相关概念。元编程是什么？元编程就是普通的编程。那么为什么会有元编程这个概念呢？这是因为元编程会做出一些比普通编程行为更酷的行为，它能够通过写好的代码来处理代码，因此给它起了一个新名字以示区分。听起来有些矛盾和拗口，下面来看一个例子说明一下吧。</p>\n<p>有过Qt或者MFC编程经验的人都知道，如果我们想要给按钮或者其他控件添加对某个事件的响应处理函数，只需要按照一定的明明规范来命名一个函数即可。例如在Qt中，想要对一个名叫btn的按钮绑定一个点击事件的处理函数只需要位该函数命名为<code>on_btn_clicked</code>即可。但是，我们并没有显示的将该函数和btn连接在一起，这是怎么做到的呢？Qt中一些代码会分析函数名，当检测到以<code>on_objectname_signalname</code>命名的函数时，Qt会自动将该函数和<code>objectname</code>对象的<code>signalname</code>信号绑定。这就是元编程，通过代码来对其他代码进行处理。</p>\n<h2 id=\"反射-reflection-和内省-type-introspection\"><a href=\"#反射-reflection-和内省-type-introspection\" class=\"headerlink\" title=\"反射(reflection)和内省(type introspection)\"></a>反射(reflection)和内省(type introspection)</h2><p><a href=\"http://en.wikipedia.org/wiki/Reflection_(computer_science\">反射</a>)和<a href=\"http://en.wikipedia.org/wiki/Introspection_(computer_science\">内省</a>)是和元编程息息相关的两个概念，这两个概念非常相似，但却有很大的不同。</p>\n<pre><code>**内省**是在运行时检查对象的类型和属性的能力，**反射**是在运行时检查和修改程序结构和行为的能力。\n</code></pre><p>可以看出，反射比内省更加强大，内省是反射的子集，这一点不应该混淆。有些为地方可以看到说自省和反射是一回事，我想这个自省应该是根据<code>introspection</code>来翻译的，而<code>introspection</code>是<code>type introspection</code>的简称。so，不要相信那些人，他们应该去补习了。</p>\n<h2 id=\"golang-reflect\"><a href=\"#golang-reflect\" class=\"headerlink\" title=\"golang reflect\"></a>golang reflect</h2><p>在golang中，提供了一个<code>reflect</code>包，这个包主要包含了两个主要类型<code>Type</code>和<code>Value</code>，并且在<code>reflect</code>包中还提供了两个非常方便的函数<code>TypeOf</code>和<code>ValueOf</code>来分别获得这两种类型。下面来看一段示例代码：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"reflect\"</span></div><div class=\"line\">\t<span class=\"string\">\"regexp\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Struct <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tPub <span class=\"keyword\">string</span></div><div class=\"line\">\tpri <span class=\"keyword\">int</span> <span class=\"string\">`pri:\"private\"`</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Struct)</span> <span class=\"title\">Pri</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> s.pri</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Struct)</span> <span class=\"title\">sum</span><span class=\"params\">(o <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> s.pri + o</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Struct)</span> <span class=\"title\">Sum</span><span class=\"params\">(o <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">\ts.pri = s.sum(o)</div><div class=\"line\">\t<span class=\"keyword\">return</span> s.pri</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Struct)</span> <span class=\"title\">Name</span><span class=\"params\">(firstName, lastName <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> firstName + <span class=\"string\">\" \"</span> + lastName</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a + b</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\ts := &amp;Struct&#123;&#125;</div><div class=\"line\">\tv := reflect.ValueOf(s)</div><div class=\"line\">\tt := reflect.TypeOf(s)</div><div class=\"line\"></div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"Type:\"</span>, t)</div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"Value:\"</span>, v)</div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"Kind:\"</span>, t.Kind())</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; t.Elem().NumField(); i++ &#123;</div><div class=\"line\">\t\tf := t.Elem().Field(i)</div><div class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"struct field %d: %s, %s， embeded?: %v, tag: %v\\n\"</span>, i, f.Name, f.Type, f.Anonymous, f.Tag)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; t.NumMethod(); i++ &#123;</div><div class=\"line\">\t\tm := t.Method(i)</div><div class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"struct field %d: %s, %s\\n\"</span>, i, m.Name, m.Type)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tcallMethod := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(s reflect.Value, methodName <span class=\"keyword\">string</span>, methodArgs ...reflect.Value)</span> <span class=\"params\">([]reflect.Value, error)</span></span> &#123;</div><div class=\"line\">\t\tt := s.Type()</div><div class=\"line\">\t\tmethod, exist := t.MethodByName(methodName)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> !exist &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"\\\"%s\\\": is not existed for %s\"</span>, methodName, t)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> regexp.MustCompile(<span class=\"string\">`^[a-z]`</span>).MatchString(method.Name) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"\\\"%s\\\": unexported field cannot be called\"</span>, method.Name)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\targs := []reflect.Value&#123;s&#125;</div><div class=\"line\">\t\targs = <span class=\"built_in\">append</span>(args, methodArgs...)</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> method.Func.Call(args), <span class=\"literal\">nil</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tfmt.Print(<span class=\"string\">\"call Struct.Pri: \"</span>)</div><div class=\"line\">\tfmt.Println(callMethod(v, <span class=\"string\">\"Pri\"</span>))</div><div class=\"line\"></div><div class=\"line\">\tfmt.Print(<span class=\"string\">\"call Struct.Sum: \"</span>)</div><div class=\"line\">\tfmt.Println(callMethod(v, <span class=\"string\">\"Sum\"</span>, reflect.ValueOf(<span class=\"number\">1</span>)))</div><div class=\"line\"></div><div class=\"line\">\tfmt.Print(<span class=\"string\">\"call Struct.Name: \"</span>)</div><div class=\"line\">\tfmt.Println(callMethod(v, <span class=\"string\">\"Name\"</span>, reflect.ValueOf(<span class=\"string\">\"David\"</span>), reflect.ValueOf(<span class=\"string\">\"Beckham\"</span>)))</div><div class=\"line\"></div><div class=\"line\">\tfmt.Print(<span class=\"string\">\"call Struct.sum: \"</span>)</div><div class=\"line\">\tfmt.Println(callMethod(v, <span class=\"string\">\"sum\"</span>, reflect.ValueOf(<span class=\"number\">1</span>)))</div><div class=\"line\"></div><div class=\"line\">\tfmt.Print(<span class=\"string\">\"call Struct.s: \"</span>)</div><div class=\"line\">\tfmt.Println(callMethod(v, <span class=\"string\">\"s\"</span>))</div><div class=\"line\"></div><div class=\"line\">\tfn := reflect.ValueOf(sum)</div><div class=\"line\">\tft := fn.Type()</div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; ft.NumIn(); i++ &#123;</div><div class=\"line\">\t\tin := ft.In(i)</div><div class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"function argument %d: %s\\n\"</span>, i, in)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; ft.NumOut(); i++ &#123;</div><div class=\"line\">\t\tout := ft.In(i)</div><div class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"function return value %d: %s\\n\"</span>, i, out)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\ti, j := <span class=\"number\">1</span>, <span class=\"number\">3</span></div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"Call sum(%d, %d) function: %v\\n\"</span>,</div><div class=\"line\">\t\ti, j,</div><div class=\"line\">\t\tfn.Call([]reflect.Value&#123;</div><div class=\"line\">\t\t\treflect.ValueOf(i),</div><div class=\"line\">\t\t\treflect.ValueOf(j),</div><div class=\"line\">\t\t&#125;)[<span class=\"number\">0</span>].Interface(),</div><div class=\"line\">\t)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果运行这段代码会得到一下输出：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">Type: *main.Struct</div><div class=\"line\">Value: &lt;*main.Struct Value&gt;</div><div class=\"line\">Kind: ptr</div><div class=\"line\">struct field 0: Pub, string, embeded?: <span class=\"literal\">false</span>, tag: </div><div class=\"line\">struct field 1: pri, int, embeded?: <span class=\"literal\">false</span>, tag: pri:<span class=\"string\">\"private\"</span></div><div class=\"line\">struct field 0: Name, func(*main.Struct, string, string) string</div><div class=\"line\">struct field 1: Pri, func(*main.Struct) int</div><div class=\"line\">struct field 2: Sum, func(*main.Struct, int) int</div><div class=\"line\">struct field 3: sum, func(*main.Struct, int) int</div><div class=\"line\">call Struct.Pri: [&lt;int Value&gt;] &lt;nil&gt;</div><div class=\"line\">call Struct.Sum: [&lt;int Value&gt;] &lt;nil&gt;</div><div class=\"line\">call Struct.Name: [David Beckham] &lt;nil&gt;</div><div class=\"line\">call Struct.sum: [] <span class=\"string\">\"sum\"</span>: unexported field cannot be called</div><div class=\"line\">call Struct.s: [] <span class=\"string\">\"s\"</span>: is not existed <span class=\"keyword\">for</span> *main.Struct</div><div class=\"line\"><span class=\"keyword\">function</span> argument 0: int</div><div class=\"line\"><span class=\"keyword\">function</span> argument 1: int</div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"built_in\">return</span> value 0: int</div><div class=\"line\">Call sum(1, 3) <span class=\"keyword\">function</span>: 4</div></pre></td></tr></table></figure></p>\n<h2 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h2><p>这段代码虽然有点长，不过却非常简单和清晰，现在来分析一下这段代码及其输出结果。</p>\n<p>在代码的开始部分，通过<code>reflect.ValueOf</code>来获取<code>Struct</code>结构体指针的值信息，通过<code>reflect.TypeOf</code>来获取<code>Struct</code>结构体指针的类型信息，需要留意的地方是，这里创建的是一个<code>Struct</code>的结构体指针，而不是一个<code>Struct</code>结构体。</p>\n<h3 id=\"Kind\"><a href=\"#Kind\" class=\"headerlink\" title=\"Kind\"></a>Kind</h3><p>在代码的第47行调用了一个叫<code>Kind</code>的方法，<code>Kind</code>方法是用来表示一个<code>Type</code>是属于哪一种类型的，因此，通过<code>Kind</code>方法也可以准确的判断出这是一个<code>ptr</code>。</p>\n<h3 id=\"Elem\"><a href=\"#Elem\" class=\"headerlink\" title=\"Elem\"></a>Elem</h3><p>在遍历结构体字段时用到了一个叫<code>Elem</code>的方法，由于<code>s</code>是一个指针类型，因此需要通过<code>Value.Elem</code>得到结构体的值信息，这样才能获取<code>Struct</code>结构体中的字段信息。同时需要注意，<code>Value.Elem</code>方法只对指针和接口——例如<code>error</code>——有效。</p>\n<p>在<code>reflect.Value</code>和<code>reflect.Type</code>中有不少命名相同的方法，不过意义却不一样，<code>Elem</code>就是一个典型的例子，与<code>Value.Elem</code>不同，在<code>reflect.Type</code>中<code>Type.Elem</code>用来可以用来表示map中值的类型。</p>\n<h3 id=\"struct-tag\"><a href=\"#struct-tag\" class=\"headerlink\" title=\"struct tag\"></a>struct tag</h3><p>在golang中有一个被成为<code>struct tag</code>的东西，每次见到这个东西都感觉怪怪的，通常也很少使用。</p>\n<p><code>struct tag</code>通常是一个用空格分隔的键值对，在键中不包含双引号，冒号和空格，而值则是由双引号引起来的任意字符。</p>\n<p>不过鉴于<code>struct tag</code>是一个字符串，而<code>reflect.StructTag</code>本身其实也是一个字符串，也许可以在适当的时候自由发挥一下。另外，<code>reflect.StructTag</code>只有一个<code>Get</code>方法。</p>\n<p>下面是来自<code>reflect</code>包文档中的一个例子，更详细的展示了<code>struct tag</code>的用法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"reflect\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">type</span> S <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t\tF <span class=\"keyword\">string</span> <span class=\"string\">`species:\"gopher\" color:\"blue\"`</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\ts := S&#123;&#125;</div><div class=\"line\">\tst := reflect.TypeOf(s)</div><div class=\"line\">\tfield := st.Field(<span class=\"number\">0</span>)</div><div class=\"line\">\tfmt.Println(field.Tag.Get(<span class=\"string\">\"color\"</span>), field.Tag.Get(<span class=\"string\">\"species\"</span>))</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Method-and-Call\"><a href=\"#Method-and-Call\" class=\"headerlink\" title=\"Method and Call\"></a>Method and Call</h3><p>接下来是<code>callMethod</code>函数。在<code>callMethod</code>函数中有几个地方需要注意。</p>\n<p>首先是通过<code>reflect.Type</code>中的<code>MethodByName</code>方法来获取<code>reflect.Method</code>类型的方法信息，以及判断该方法是否存在。</p>\n<p>如果你愿意，同样可以使用<code>reflect.Value</code>中的<code>MethodByName</code>方法来获得<code>reflect.Value</code>类型的方法信息，然后通过<code>Value.IsValid</code>来判断该方法是否存在。这里的<code>reflect.Value</code>类型的信息等于<code>reflect.Method</code>类型中的<code>Func</code>字段。</p>\n<p>第二个需要注意的地方时这里通过使用正则表达式来判断方法的名字的首字母大小写来判断该方法是否导出，这是由于<code>reflect</code>包中似乎并没有提供可以判断方法和字段是否导出的方法。</p>\n<p>第三，在调用一个结构体方法时，需要将<code>receiver</code>作为第一个参数传递个方法。</p>\n<h3 id=\"Value-Type\"><a href=\"#Value-Type\" class=\"headerlink\" title=\"Value.Type()\"></a>Value.Type()</h3><p>在对<code>sum</code>进行反射时并没有使用<code>reflect.TypeOf</code>，而是使用了<code>Value.Type</code>方法，这个方法同样可以得到类型信息。</p>\n<h3 id=\"Interface\"><a href=\"#Interface\" class=\"headerlink\" title=\"Interface\"></a>Interface</h3><p>在代码的最后一部分取得返回值时使用了<code>Value.Interface</code>方法。该方法的作用是返回一个<code>interface{}</code>以便能够获取真正的值。</p>\n<h2 id=\"改变对象的值\"><a href=\"#改变对象的值\" class=\"headerlink\" title=\"改变对象的值\"></a>改变对象的值</h2><p><code>reflect</code>包出了获取各种信息以外，还可以改变变量的值。一个对象能否设值，可以通过<code>Value.CanSet</code>方法来判断。不过需要记住，只有指针类型通过<code>Elem</code>函数来得到真正的对象才能设值。这是因为在<a href=\"http://golang.org/doc/articles/laws_of_reflection.html\">laws of reflection</a>中有这么一句话：</p>\n<blockquote>\n<p>   Just keep in mind that reflection Values need the address of something in order to modify what they represent.</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>reflect</code>保重常用的方法克功能基本都涉及到了，不过并没有事无巨细的讲解，还有channel，slice，map，embeded field等没涉及到，更详细的内容只有一边在实际中去探索，一边参看引用，才会更有意义。希望元编程能够在适当的地方改善我们的生活。</p>\n<h2 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h2><ol>\n<li><a href=\"http://golang.org/pkg/reflect/\">golang reflect package document</a>.</li>\n<li><a href=\"http://golang.org/doc/articles/laws_of_reflection.html\">laws of reflection</a>.(注：网上有有中文翻译版本。)</li>\n</ol>\n"},{"layout":"post","title":"2016找工作记1 - 一次面试的反思","description":"2016找工作记1，一次面试的反思","modified":"2016-08-08T16:00:00.000Z","image":{"feature":"abstract-3.jpg","credit":"dargadgetz","creditlink":"http://www.dargadgetz.com/ios-7-abstract-wallpaper-pack-for-iphone-5-and-ipod-touch-retina/"},"comments":1,"share":true,"_content":"\n今天很幸运的去了某公司面试前端开发，可是今天的面试表现却并不理想。面试来得很突然，知道了面试的消息后，整个人都很亢奋，在被问及何时可以去面试时，说立刻可以去面试更是其中的败笔。整个人并不是处于准备好的状态，而是一种慌慌张张，没有任何准备的状态，这真的是一场失败的面试。回家后自己一直在反思，晚上室友回来后也一起聊了聊这次面试，我想通过的希望大概很渺茫了，不过失败也是一种学习，对此次面试做一次总结反思还是很有必要的，要对下一次的面试起到积极的作用。\n\n# 对于面试官的问题没有展开讲解\n\n今天面试官看到我的简历上有golang的使用经历，因此要我介绍一下golang这门语言。也许是最近在看编译原理的关系，对语言这种东西看的很淡然，认为一门语言，本身只是一组语法，其本质不过是文本处理，虽然一门语言提供了什么功能很重要，但是一门语言真正的核心价值在于这个语言相关的库或者说生态，而这门语言能够做什么，基本是在于是否有相关的库来提供相应的功能。\n\n所以，在面试时只是简单地讲述了一下golang主要特点是语法比较简洁，并且有goroutine，这种原生的并发支持，是的golang这门语言在写并发程序时负担更小。\n\n然而，对于介绍一门语言其实还有不少可以展开的地方。首先是这门语言的设计目的，是否达到了效果。其次，可以介绍一下这门语言中的亮点，包括之前说的语法简洁，goroutine。之后可以介绍一些在使用这么语言中遇到的问题，例如，golang与C语言结合使用遇到的问题，goroutine遇到了什么问题。还可以讲述一下对这门语言设计上的看法，比如对interface的看法。\n\n世间万物皆有因果，仅仅是一个结论并不能很好地让人理解，毕竟面试官不是学徒，你也不是禅师。结论更多的是对个人而言，只有有过类似经历的人才可能能够理解。我想在面试中最重要的是展示自己，如果在面试中能够将一个问题由因及果的展开的来讲一讲，一定能够更好的展示自己。\n\n\n# 对于重难点的定义似乎过高\n\n关于在工作中遇到的重难点问题，室友的一番话点醒了我，大概是自己对重难点的定义太高，认为如果没有做出什么突出的改善或者有重大价值的事情则不能被认为是重难点。\n\n其实冷静的想一下，所谓的重难点，并不一定是要创造出惊人的价值，也许只是一次小小的技术突破，一次小小的改进或者是解决的一个个的坑，甚至是从写代码过程中学到了什么，都可以是一次不错的重难点。\n\n在工作与非工作中都可能遇到各种各样的问题，结合问题，解决这些问题的过程以及最后如何解决这些问题做一次小小的总结，本身就可以是一次不错的对重难点面试问题的回答了。\n\n以DDE相关的内容为例：如何解决Launcher中虚化显示图标的需求，中间尝试过什么解决方案。又比如实现Dock的底板时做了哪些尝试，遇到了哪些问题，最后是使用哪种方式解决问题。还有，给Launcher代码添加测试的工程中，学到了什么，如何学到这些东西。\n\n\n# 小结\n\n面试过程中，最重要的是展示自己。所以首先要做的是冷静，说话前停顿一下，给自己一点思考的时间。将问题由因及果的展开描述，而不是简单的抛出一个模糊的结论。必要时，或许可以通过纸和笔来举一些例子，更好的解释一些内容。\n\n在面试前同样需要冷静的准备，这些准备可以提前完成。首先回忆一下以前项目的需求，然后看看这些需求是否遇到了某些坑，而这些坑正是这个项目的重难点。再回顾一下，在项目开发重构等过程中是否学到了什么东西。可以将这些记录下来，在面试前回顾一下。可能的话，模拟面试也是一个不错的选择。\n\n同样，面试后，反思一下此次面试过程中的问题，然后总结一下，要在下次做到更好。\n","source":"_posts/2016-08-09-interview.md","raw":"---\nlayout: post\ntitle: 2016找工作记1 - 一次面试的反思\ndescription: \"2016找工作记1，一次面试的反思\"\nmodified: 2016-08-09\ntags: [反思与总结]\nimage:\n  feature: abstract-3.jpg\n  credit: dargadgetz\n  creditlink: http://www.dargadgetz.com/ios-7-abstract-wallpaper-pack-for-iphone-5-and-ipod-touch-retina/\ncomments: true\nshare: true\n---\n\n今天很幸运的去了某公司面试前端开发，可是今天的面试表现却并不理想。面试来得很突然，知道了面试的消息后，整个人都很亢奋，在被问及何时可以去面试时，说立刻可以去面试更是其中的败笔。整个人并不是处于准备好的状态，而是一种慌慌张张，没有任何准备的状态，这真的是一场失败的面试。回家后自己一直在反思，晚上室友回来后也一起聊了聊这次面试，我想通过的希望大概很渺茫了，不过失败也是一种学习，对此次面试做一次总结反思还是很有必要的，要对下一次的面试起到积极的作用。\n\n# 对于面试官的问题没有展开讲解\n\n今天面试官看到我的简历上有golang的使用经历，因此要我介绍一下golang这门语言。也许是最近在看编译原理的关系，对语言这种东西看的很淡然，认为一门语言，本身只是一组语法，其本质不过是文本处理，虽然一门语言提供了什么功能很重要，但是一门语言真正的核心价值在于这个语言相关的库或者说生态，而这门语言能够做什么，基本是在于是否有相关的库来提供相应的功能。\n\n所以，在面试时只是简单地讲述了一下golang主要特点是语法比较简洁，并且有goroutine，这种原生的并发支持，是的golang这门语言在写并发程序时负担更小。\n\n然而，对于介绍一门语言其实还有不少可以展开的地方。首先是这门语言的设计目的，是否达到了效果。其次，可以介绍一下这门语言中的亮点，包括之前说的语法简洁，goroutine。之后可以介绍一些在使用这么语言中遇到的问题，例如，golang与C语言结合使用遇到的问题，goroutine遇到了什么问题。还可以讲述一下对这门语言设计上的看法，比如对interface的看法。\n\n世间万物皆有因果，仅仅是一个结论并不能很好地让人理解，毕竟面试官不是学徒，你也不是禅师。结论更多的是对个人而言，只有有过类似经历的人才可能能够理解。我想在面试中最重要的是展示自己，如果在面试中能够将一个问题由因及果的展开的来讲一讲，一定能够更好的展示自己。\n\n\n# 对于重难点的定义似乎过高\n\n关于在工作中遇到的重难点问题，室友的一番话点醒了我，大概是自己对重难点的定义太高，认为如果没有做出什么突出的改善或者有重大价值的事情则不能被认为是重难点。\n\n其实冷静的想一下，所谓的重难点，并不一定是要创造出惊人的价值，也许只是一次小小的技术突破，一次小小的改进或者是解决的一个个的坑，甚至是从写代码过程中学到了什么，都可以是一次不错的重难点。\n\n在工作与非工作中都可能遇到各种各样的问题，结合问题，解决这些问题的过程以及最后如何解决这些问题做一次小小的总结，本身就可以是一次不错的对重难点面试问题的回答了。\n\n以DDE相关的内容为例：如何解决Launcher中虚化显示图标的需求，中间尝试过什么解决方案。又比如实现Dock的底板时做了哪些尝试，遇到了哪些问题，最后是使用哪种方式解决问题。还有，给Launcher代码添加测试的工程中，学到了什么，如何学到这些东西。\n\n\n# 小结\n\n面试过程中，最重要的是展示自己。所以首先要做的是冷静，说话前停顿一下，给自己一点思考的时间。将问题由因及果的展开描述，而不是简单的抛出一个模糊的结论。必要时，或许可以通过纸和笔来举一些例子，更好的解释一些内容。\n\n在面试前同样需要冷静的准备，这些准备可以提前完成。首先回忆一下以前项目的需求，然后看看这些需求是否遇到了某些坑，而这些坑正是这个项目的重难点。再回顾一下，在项目开发重构等过程中是否学到了什么东西。可以将这些记录下来，在面试前回顾一下。可能的话，模拟面试也是一个不错的选择。\n\n同样，面试后，反思一下此次面试过程中的问题，然后总结一下，要在下次做到更好。\n","slug":"2016-08-09-interview","published":1,"date":"2016-12-27T12:40:26.276Z","updated":"2016-12-27T12:40:26.276Z","photos":[],"link":"","_id":"cix7i6arr0005271j70pnplsk","content":"<p>今天很幸运的去了某公司面试前端开发，可是今天的面试表现却并不理想。面试来得很突然，知道了面试的消息后，整个人都很亢奋，在被问及何时可以去面试时，说立刻可以去面试更是其中的败笔。整个人并不是处于准备好的状态，而是一种慌慌张张，没有任何准备的状态，这真的是一场失败的面试。回家后自己一直在反思，晚上室友回来后也一起聊了聊这次面试，我想通过的希望大概很渺茫了，不过失败也是一种学习，对此次面试做一次总结反思还是很有必要的，要对下一次的面试起到积极的作用。</p>\n<h1 id=\"对于面试官的问题没有展开讲解\"><a href=\"#对于面试官的问题没有展开讲解\" class=\"headerlink\" title=\"对于面试官的问题没有展开讲解\"></a>对于面试官的问题没有展开讲解</h1><p>今天面试官看到我的简历上有golang的使用经历，因此要我介绍一下golang这门语言。也许是最近在看编译原理的关系，对语言这种东西看的很淡然，认为一门语言，本身只是一组语法，其本质不过是文本处理，虽然一门语言提供了什么功能很重要，但是一门语言真正的核心价值在于这个语言相关的库或者说生态，而这门语言能够做什么，基本是在于是否有相关的库来提供相应的功能。</p>\n<p>所以，在面试时只是简单地讲述了一下golang主要特点是语法比较简洁，并且有goroutine，这种原生的并发支持，是的golang这门语言在写并发程序时负担更小。</p>\n<p>然而，对于介绍一门语言其实还有不少可以展开的地方。首先是这门语言的设计目的，是否达到了效果。其次，可以介绍一下这门语言中的亮点，包括之前说的语法简洁，goroutine。之后可以介绍一些在使用这么语言中遇到的问题，例如，golang与C语言结合使用遇到的问题，goroutine遇到了什么问题。还可以讲述一下对这门语言设计上的看法，比如对interface的看法。</p>\n<p>世间万物皆有因果，仅仅是一个结论并不能很好地让人理解，毕竟面试官不是学徒，你也不是禅师。结论更多的是对个人而言，只有有过类似经历的人才可能能够理解。我想在面试中最重要的是展示自己，如果在面试中能够将一个问题由因及果的展开的来讲一讲，一定能够更好的展示自己。</p>\n<h1 id=\"对于重难点的定义似乎过高\"><a href=\"#对于重难点的定义似乎过高\" class=\"headerlink\" title=\"对于重难点的定义似乎过高\"></a>对于重难点的定义似乎过高</h1><p>关于在工作中遇到的重难点问题，室友的一番话点醒了我，大概是自己对重难点的定义太高，认为如果没有做出什么突出的改善或者有重大价值的事情则不能被认为是重难点。</p>\n<p>其实冷静的想一下，所谓的重难点，并不一定是要创造出惊人的价值，也许只是一次小小的技术突破，一次小小的改进或者是解决的一个个的坑，甚至是从写代码过程中学到了什么，都可以是一次不错的重难点。</p>\n<p>在工作与非工作中都可能遇到各种各样的问题，结合问题，解决这些问题的过程以及最后如何解决这些问题做一次小小的总结，本身就可以是一次不错的对重难点面试问题的回答了。</p>\n<p>以DDE相关的内容为例：如何解决Launcher中虚化显示图标的需求，中间尝试过什么解决方案。又比如实现Dock的底板时做了哪些尝试，遇到了哪些问题，最后是使用哪种方式解决问题。还有，给Launcher代码添加测试的工程中，学到了什么，如何学到这些东西。</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>面试过程中，最重要的是展示自己。所以首先要做的是冷静，说话前停顿一下，给自己一点思考的时间。将问题由因及果的展开描述，而不是简单的抛出一个模糊的结论。必要时，或许可以通过纸和笔来举一些例子，更好的解释一些内容。</p>\n<p>在面试前同样需要冷静的准备，这些准备可以提前完成。首先回忆一下以前项目的需求，然后看看这些需求是否遇到了某些坑，而这些坑正是这个项目的重难点。再回顾一下，在项目开发重构等过程中是否学到了什么东西。可以将这些记录下来，在面试前回顾一下。可能的话，模拟面试也是一个不错的选择。</p>\n<p>同样，面试后，反思一下此次面试过程中的问题，然后总结一下，要在下次做到更好。</p>\n","excerpt":"","more":"<p>今天很幸运的去了某公司面试前端开发，可是今天的面试表现却并不理想。面试来得很突然，知道了面试的消息后，整个人都很亢奋，在被问及何时可以去面试时，说立刻可以去面试更是其中的败笔。整个人并不是处于准备好的状态，而是一种慌慌张张，没有任何准备的状态，这真的是一场失败的面试。回家后自己一直在反思，晚上室友回来后也一起聊了聊这次面试，我想通过的希望大概很渺茫了，不过失败也是一种学习，对此次面试做一次总结反思还是很有必要的，要对下一次的面试起到积极的作用。</p>\n<h1 id=\"对于面试官的问题没有展开讲解\"><a href=\"#对于面试官的问题没有展开讲解\" class=\"headerlink\" title=\"对于面试官的问题没有展开讲解\"></a>对于面试官的问题没有展开讲解</h1><p>今天面试官看到我的简历上有golang的使用经历，因此要我介绍一下golang这门语言。也许是最近在看编译原理的关系，对语言这种东西看的很淡然，认为一门语言，本身只是一组语法，其本质不过是文本处理，虽然一门语言提供了什么功能很重要，但是一门语言真正的核心价值在于这个语言相关的库或者说生态，而这门语言能够做什么，基本是在于是否有相关的库来提供相应的功能。</p>\n<p>所以，在面试时只是简单地讲述了一下golang主要特点是语法比较简洁，并且有goroutine，这种原生的并发支持，是的golang这门语言在写并发程序时负担更小。</p>\n<p>然而，对于介绍一门语言其实还有不少可以展开的地方。首先是这门语言的设计目的，是否达到了效果。其次，可以介绍一下这门语言中的亮点，包括之前说的语法简洁，goroutine。之后可以介绍一些在使用这么语言中遇到的问题，例如，golang与C语言结合使用遇到的问题，goroutine遇到了什么问题。还可以讲述一下对这门语言设计上的看法，比如对interface的看法。</p>\n<p>世间万物皆有因果，仅仅是一个结论并不能很好地让人理解，毕竟面试官不是学徒，你也不是禅师。结论更多的是对个人而言，只有有过类似经历的人才可能能够理解。我想在面试中最重要的是展示自己，如果在面试中能够将一个问题由因及果的展开的来讲一讲，一定能够更好的展示自己。</p>\n<h1 id=\"对于重难点的定义似乎过高\"><a href=\"#对于重难点的定义似乎过高\" class=\"headerlink\" title=\"对于重难点的定义似乎过高\"></a>对于重难点的定义似乎过高</h1><p>关于在工作中遇到的重难点问题，室友的一番话点醒了我，大概是自己对重难点的定义太高，认为如果没有做出什么突出的改善或者有重大价值的事情则不能被认为是重难点。</p>\n<p>其实冷静的想一下，所谓的重难点，并不一定是要创造出惊人的价值，也许只是一次小小的技术突破，一次小小的改进或者是解决的一个个的坑，甚至是从写代码过程中学到了什么，都可以是一次不错的重难点。</p>\n<p>在工作与非工作中都可能遇到各种各样的问题，结合问题，解决这些问题的过程以及最后如何解决这些问题做一次小小的总结，本身就可以是一次不错的对重难点面试问题的回答了。</p>\n<p>以DDE相关的内容为例：如何解决Launcher中虚化显示图标的需求，中间尝试过什么解决方案。又比如实现Dock的底板时做了哪些尝试，遇到了哪些问题，最后是使用哪种方式解决问题。还有，给Launcher代码添加测试的工程中，学到了什么，如何学到这些东西。</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>面试过程中，最重要的是展示自己。所以首先要做的是冷静，说话前停顿一下，给自己一点思考的时间。将问题由因及果的展开描述，而不是简单的抛出一个模糊的结论。必要时，或许可以通过纸和笔来举一些例子，更好的解释一些内容。</p>\n<p>在面试前同样需要冷静的准备，这些准备可以提前完成。首先回忆一下以前项目的需求，然后看看这些需求是否遇到了某些坑，而这些坑正是这个项目的重难点。再回顾一下，在项目开发重构等过程中是否学到了什么东西。可以将这些记录下来，在面试前回顾一下。可能的话，模拟面试也是一个不错的选择。</p>\n<p>同样，面试后，反思一下此次面试过程中的问题，然后总结一下，要在下次做到更好。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-12-27T12:40:26.276Z","updated":"2016-12-27T12:40:26.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix7i6arx0007271jl2ui86yh","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cix7i6ar50000271j2l33ndoj","tag_id":"cix7i6arf0002271j7x5zfs5k","_id":"cix7i6as20009271jh5edu88v"},{"post_id":"cix7i6ar50000271j2l33ndoj","tag_id":"cix7i6aru0006271js5ybxfc0","_id":"cix7i6as2000a271jwx5lcfqa"},{"post_id":"cix7i6arb0001271juqhcc7ce","tag_id":"cix7i6as10008271j6v2uykhw","_id":"cix7i6as3000c271jxyrc0ilv"},{"post_id":"cix7i6ari0003271jzsqf3dwr","tag_id":"cix7i6as3000b271jnhewge6d","_id":"cix7i6as8000h271jpf703sia"},{"post_id":"cix7i6ari0003271jzsqf3dwr","tag_id":"cix7i6as4000d271jyxqhfo21","_id":"cix7i6as9000i271joo1rl0iq"},{"post_id":"cix7i6ari0003271jzsqf3dwr","tag_id":"cix7i6as4000e271j2fwghhx1","_id":"cix7i6asb000k271jlyyfscb2"},{"post_id":"cix7i6ari0003271jzsqf3dwr","tag_id":"cix7i6as5000f271jtcfhjcs3","_id":"cix7i6ase000l271jt7d395te"},{"post_id":"cix7i6arm0004271jhbxrgabp","tag_id":"cix7i6arf0002271j7x5zfs5k","_id":"cix7i6ase000m271jilayg7j9"},{"post_id":"cix7i6arm0004271jhbxrgabp","tag_id":"cix7i6aru0006271js5ybxfc0","_id":"cix7i6asf000n271jf4k0w52z"},{"post_id":"cix7i6arr0005271j70pnplsk","tag_id":"cix7i6as9000j271jvheqvtzp","_id":"cix7i6asf000o271jane24h3n"}],"Tag":[{"name":"golang","_id":"cix7i6arf0002271j7x5zfs5k"},{"name":"go","_id":"cix7i6aru0006271js5ybxfc0"},{"name":"jekyll","_id":"cix7i6as10008271j6v2uykhw"},{"name":"c","_id":"cix7i6as3000b271jnhewge6d"},{"name":"cpp","_id":"cix7i6as4000d271jyxqhfo21"},{"name":"c++","_id":"cix7i6as4000e271j2fwghhx1"},{"name":"bit-operation","_id":"cix7i6as5000f271jtcfhjcs3"},{"name":"反思与总结","_id":"cix7i6as9000j271jvheqvtzp"}]}}